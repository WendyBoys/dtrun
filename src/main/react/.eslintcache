[{"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\index.js":"1","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\App.jsx":"2","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\AuthorizedRoute.jsx":"3","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\user\\Register.jsx":"4","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\user\\Login.jsx":"5","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\dashboard\\Index.jsx":"6","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\user\\service.js":"7","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\dashboard\\Dashboard.jsx":"8","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\about\\About.jsx":"9","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Pushconfig.jsx":"10","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\movetask\\MoveTask.jsx":"11","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Sysmanage.jsx":"12","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\datasource\\Datasource.jsx":"13","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\request.js":"14","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\datasource\\Update.jsx":"15","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\datasource\\Show.jsx":"16","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Update.jsx":"17","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\datasource\\Create.jsx":"18","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Create.jsx":"19","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Logs.jsx":"20","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\movetask\\Show.jsx":"21","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Contact.jsx":"22","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Whitelist.jsx":"23","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Create.jsx":"24","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\movetask\\Update.jsx":"25","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Update.jsx":"26","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\movetask\\Create.jsx":"27","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\datasource\\service.js":"28","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\service.js":"29","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\movetask\\service.js":"30","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\service.js":"31"},{"size":429,"mtime":1611580572540,"results":"32","hashOfConfig":"33"},{"size":1088,"mtime":1621261565020,"results":"34","hashOfConfig":"33"},{"size":446,"mtime":1611580572523,"results":"35","hashOfConfig":"33"},{"size":4302,"mtime":1621261565026,"results":"36","hashOfConfig":"33"},{"size":5300,"mtime":1621947554200,"results":"37","hashOfConfig":"33"},{"size":15761,"mtime":1621947216660,"results":"38","hashOfConfig":"33"},{"size":699,"mtime":1622171289732,"results":"39","hashOfConfig":"33"},{"size":4502,"mtime":1622195597268,"results":"40","hashOfConfig":"33"},{"size":3049,"mtime":1614432339880,"results":"41","hashOfConfig":"33"},{"size":580,"mtime":1617186457124,"results":"42","hashOfConfig":"33"},{"size":609,"mtime":1618219138649,"results":"43","hashOfConfig":"33"},{"size":615,"mtime":1621261565023,"results":"44","hashOfConfig":"33"},{"size":663,"mtime":1613884764671,"results":"45","hashOfConfig":"33"},{"size":1781,"mtime":1618376007510,"results":"46","hashOfConfig":"33"},{"size":8134,"mtime":1621947216649,"results":"47","hashOfConfig":"33"},{"size":6863,"mtime":1622030354046,"results":"48","hashOfConfig":"33"},{"size":3549,"mtime":1621261565023,"results":"49","hashOfConfig":"33"},{"size":8181,"mtime":1621949136731,"results":"50","hashOfConfig":"33"},{"size":2797,"mtime":1621261565022,"results":"51","hashOfConfig":"33"},{"size":2664,"mtime":1618388191735,"results":"52","hashOfConfig":"33"},{"size":18067,"mtime":1622030354054,"results":"53","hashOfConfig":"33"},{"size":6947,"mtime":1622030354060,"results":"54","hashOfConfig":"33"},{"size":6621,"mtime":1622030354035,"results":"55","hashOfConfig":"33"},{"size":4063,"mtime":1621949136731,"results":"56","hashOfConfig":"33"},{"size":15829,"mtime":1621261565021,"results":"57","hashOfConfig":"33"},{"size":4475,"mtime":1621261565022,"results":"58","hashOfConfig":"33"},{"size":17879,"mtime":1621947216662,"results":"59","hashOfConfig":"33"},{"size":1228,"mtime":1618219309255,"results":"60","hashOfConfig":"33"},{"size":873,"mtime":1621261565024,"results":"61","hashOfConfig":"33"},{"size":933,"mtime":1615782931615,"results":"62","hashOfConfig":"33"},{"size":721,"mtime":1618219637970,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1t2n1w",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\index.js",[],["141","142"],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\App.jsx",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\AuthorizedRoute.jsx",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\user\\Register.jsx",["143","144"],"import React from 'react';\r\nimport socket from '../../images/socket.svg';\r\nimport {register} from './service'\r\nimport {Button, Col, Form, Input, notification, Row} from 'antd';\r\nimport {AuditOutlined, LockOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst validateMessages = {\r\n    required: '${label}为必填项!',\r\n    string: {\r\n        range: \"${label}的长度为${min}到${max}个字符\"\r\n    },\r\n};\r\nexport default class Register extends React.Component {\r\n\r\n    onFinish = (values) => {\r\n        register({\r\n            account: values.account,\r\n            password: values.password,\r\n            registerCode: values.registerCode,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.props.history.push('/login')\r\n            }\r\n            notification[result === 'Success' ? 'success' : 'error']({\r\n                message: '通知',\r\n                description:\r\n                response.data.data,\r\n                duration: 2,\r\n            });\r\n        });\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row style={{marginBottom: '5%', paddingTop: '20px', minHeight: '200px'}}>\r\n                    <Col span={6}></Col>\r\n                    <Col span={12}><img src={socket} alt=\"\" width=\"100%\" height=\"200px\"/></Col>\r\n                    <Col span={6}></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={6}></Col>\r\n                    <Col span={12}>\r\n                        <Form\r\n                            name=\"normal_login\"\r\n                            className=\"login-form\"\r\n                            initialValues={{remember: true}}\r\n                            onFinish={this.onFinish}\r\n                            validateMessages={validateMessages}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"account\"\r\n                                label=\"账号\"\r\n                                rules={[{required: true, type: 'string', min: 6, max: 10}]}\r\n                            >\r\n                                <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                                       placeholder=\"请输入账号\"/>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                name=\"password\"\r\n                                label=\"密码\"\r\n                                rules={[{required: true, type: 'string', min: 6, max: 10}]}\r\n                            >\r\n                                <Input.Password\r\n                                    prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                    type=\"password\"\r\n                                    placeholder=\"请输入密码\"\r\n                                />\r\n                            </Form.Item>\r\n                              <Form.Item\r\n                                name=\"registerCode\"\r\n                                label=\"注册码\"\r\n                                rules={[{required: true, message: '请输入注册码'}]}\r\n                            >\r\n                                <Input\r\n                                    prefix={<AuditOutlined className=\"site-form-item-icon\" />}\r\n                                    placeholder=\"注册码\"/>\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                <NavLink className=\"login-form-forgot\" to=\"/login\">\r\n                                    已有账号？去登录\r\n                                </NavLink>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\"\r\n                                        style={{marginBottom: '20px'}}>\r\n                                    立即注册\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col span={6}></Col>\r\n                </Row>\r\n            </div>);\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\user\\Login.jsx",["145","146"],"import React from 'react';\r\nimport socket from '../../images/socket.svg';\r\nimport cookie from 'react-cookies'\r\nimport {Button, Checkbox, Col, Form, Input, notification, Row} from 'antd';\r\nimport {LockOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {login} from './service'\r\n\r\nexport default class Login extends React.Component {\r\n\r\n    onFinish = (values) => {\r\n        login({\r\n            account: values.account,\r\n            password: values.password,\r\n        }).then(response => {\r\n            const result = response.data.message;\r\n            const token = response.data.data;\r\n            if (result === 'Success') {\r\n                let inFifteenMinutes = new Date(new Date().getTime() + 7 * 24 * 3600 * 1000);\r\n                cookie.save('token', token, {path: '/', expires: inFifteenMinutes})\r\n                this.props.history.push({pathname: '/index'})\r\n            } else if (result === 'LoginRefuse') {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '账号已被封禁',\r\n                    duration: 2,\r\n                });\r\n            } else if (result === 'LoginIpLimit') {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        'IP地址不在白名单中，无法登陆',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '账号或密码错误',\r\n                    duration: 2,\r\n                });\r\n            }\r\n        })\r\n    };\r\n\r\n    register() {\r\n        this.props.history.push('/register')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row style={{marginBottom: '5%', paddingTop: '20px', minHeight: '200px'}}>\r\n                    <Col span={6}></Col>\r\n                    <Col span={12}><img src={socket} alt=\"\" width=\"100%\" height=\"200px\"/></Col>\r\n                    <Col span={6}>\r\n                        <div>\r\n\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={6}></Col>\r\n                    <Col span={12}>\r\n                        <div>\r\n                            <Form\r\n                                name=\"normal_login\"\r\n                                className=\"login-form\"\r\n                                initialValues={{remember: true}}\r\n                                onFinish={this.onFinish}\r\n                            >\r\n                                <Form.Item\r\n                                    name=\"account\"\r\n                                    label=\"账号\"\r\n                                    rules={[{required: true, message: '请输入账号'}]}\r\n                                >\r\n                                    <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                                           placeholder=\"请输入账号\"/>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name=\"password\"\r\n                                    label=\"密码\"\r\n                                    rules={[{required: true, message: '请输入密码'}]}\r\n                                >\r\n                                    <Input.Password\r\n                                        prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                        type=\"password\"\r\n                                        placeholder=\"请输入密码\"\r\n                                    />\r\n                                </Form.Item>\r\n\r\n                                <Form.Item>\r\n                                    <a className=\"login-form-forgot\" href=\"\">\r\n                                        忘记密码\r\n                                    </a>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\"\r\n                                            style={{marginBottom: '20px'}}>\r\n                                        登录\r\n                                    </Button>\r\n                                    <Button type=\"primary\" htmlType=\"button\" className=\"login-form-button\"\r\n                                            onClick={() => this.register()}>\r\n                                        立即注册\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={6}></Col>\r\n                </Row>\r\n                <Row style={{textAlign: 'center'}}>\r\n                    <Col span={6}></Col>\r\n                    <Col span={12} style={{position: 'absolute', left: '45%', bottom: '10px'}}><a\r\n                        href=\"http://beian.miit.gov.cn\">豫ICP备2020036555号</a></Col>\r\n                    <Col span={6}></Col>\r\n                </Row>\r\n\r\n\r\n            </div>);\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\dashboard\\Index.jsx",["147"],"import React from 'react';\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './Dashboard';\r\nimport Datasource from '../datasource/Datasource';\r\nimport MoveTask from '../movetask/MoveTask';\r\nimport Sysmanage from '../sysmanage/Sysmanage';\r\nimport Pushconfig from '../pushconfig/Pushconfig';\r\nimport About from '../about/About';\r\nimport {getCurrentUser, modifyPassword, logout} from '../user/service';\r\nimport cookie from 'react-cookies'\r\nimport ImgCrop from 'antd-img-crop';\r\n\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Drawer,\r\n    Form,\r\n    Image,\r\n    Input,\r\n    Layout,\r\n    Menu,\r\n    message,\r\n    notification,\r\n    Row,\r\n    Spin,\r\n    Upload,\r\n} from 'antd';\r\nimport {\r\n    ContactsOutlined,\r\n    EditOutlined,\r\n    FolderOpenOutlined,\r\n    LaptopOutlined,\r\n    NotificationOutlined,\r\n    SettingOutlined,\r\n    SplitCellsOutlined,\r\n    UploadOutlined,\r\n    UserSwitchOutlined,\r\n} from '@ant-design/icons';\r\n\r\nconst {SubMenu} = Menu;\r\nconst {Header, Content, Sider} = Layout;\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 5,\r\n        span: 15,\r\n    },\r\n};\r\nconst layout = {\r\n    labelCol: {\r\n        span: 5,\r\n    },\r\n    wrapperCol: {\r\n        span: 15,\r\n    },\r\n};\r\n\r\nexport default class Index extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            token: cookie.load('token'),\r\n            userName: '',\r\n            iconUrl: '',\r\n            mainDrawer: false,\r\n            mainDrawerWidth: 250,\r\n            messageDrawer: false,\r\n            passwordDrawer: false,\r\n            placement: 'right',\r\n            loading: false,\r\n            iconLoading: false,\r\n            index: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({loading: true});\r\n        getCurrentUser().then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                const user = response.data.data;\r\n                this.setState({userName: user.userName, iconUrl: user.iconUrl, loading: false})\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '服务器连接失败，请稍后重试',\r\n                    duration: 2,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    logout() {\r\n        logout().then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                cookie.remove('token', {path: '/'});\r\n                this.props.history.push('/login')\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '注销成功',\r\n                    duration: 2,\r\n                });\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '服务器连接失败，请稍后重试',\r\n                    duration: 2,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    onFinish = (values) => {\r\n        modifyPassword({\r\n            oldPassword: values.oldPassword,\r\n            newPassword: values.newPassword\r\n        }).then((response) => {\r\n            var result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.setState({\r\n                    passwordDrawer: false,\r\n                    mainDrawerWidth: 250,\r\n                });\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '修改成功',\r\n                    duration: 1,\r\n                });\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '旧密码错误,请重新输入',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    quit() {\r\n        this.setState({\r\n            passwordDrawer: false,\r\n            mainDrawerWidth: 250,\r\n        });\r\n    }\r\n\r\n    showMainDrawer = () => {\r\n        this.setState({\r\n            mainDrawer: true,\r\n        });\r\n    };\r\n\r\n    onMainDrawerClose = () => {\r\n        this.setState({\r\n            mainDrawer: false,\r\n        });\r\n    };\r\n\r\n    showMessageDrawer = () => {\r\n        this.setState({\r\n            messageDrawer: true,\r\n            mainDrawerWidth: 470,\r\n        });\r\n    };\r\n    onMessageDrawerClose = () => {\r\n        this.setState({\r\n            messageDrawer: false,\r\n            mainDrawerWidth: 250,\r\n        });\r\n    };\r\n\r\n    showPasswordDrawer = () => {\r\n        this.setState({\r\n            passwordDrawer: true,\r\n            mainDrawerWidth: 470,\r\n        });\r\n    };\r\n    onPasswordDrawerClose = () => {\r\n        this.setState({\r\n            passwordDrawer: false,\r\n            mainDrawerWidth: 250,\r\n        });\r\n    };\r\n\r\n\r\n    beforeUpload(file) {\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n        if (!isJpgOrPng) {\r\n            message.error('仅支持JPG和PNG文件');\r\n        }\r\n        const isLt2M = file.size / 1024 / 1024 < 1;\r\n        if (!isLt2M) {\r\n            message.error('图片大小不得大于1MB');\r\n        }\r\n        return isJpgOrPng && isLt2M;\r\n    }\r\n\r\n\r\n    setIconLoading = () => {\r\n        this.setState({iconLoading: false});\r\n    };\r\n\r\n\r\n    handleChange = info => {\r\n        if (info.file.status === 'uploading') {\r\n            this.setState({iconLoading: true});\r\n            return;\r\n        }\r\n        if (info.file.status === 'done') {\r\n            const response = info.fileList[this.state.index].response;\r\n            if (response.message === 'Success') {\r\n                this.setState({iconUrl: response.data});\r\n                const size = info.file.size / 1024\r\n                if (size > 512 && size <= 1024) {\r\n                    setTimeout(this.setIconLoading, 2000)\r\n                } else if (size > 256 && size <= 512) {\r\n                    setTimeout(this.setIconLoading, 1000)\r\n                } else {\r\n                    this.setState({iconLoading: false});\r\n                }\r\n                message.success('修改头像成功');\r\n            } else {\r\n                message.error('修改头像失败');\r\n            }\r\n            this.setState({index: this.state.index + 1});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {userName, iconUrl, placement, mainDrawer, mainDrawerWidth, loading, iconLoading} = this.state;\r\n        return <div style={{height: '100%'}}>\r\n\r\n            <Drawer\r\n                title={'欢迎回来，' + userName}\r\n                placement={placement}\r\n                closable={false}\r\n                onClose={this.onMainDrawerClose}\r\n                visible={mainDrawer}\r\n                key={placement}\r\n                width={mainDrawerWidth}\r\n            >\r\n                <Spin spinning={iconLoading}>\r\n                    <Image\r\n                        style={{borderRadius: '100%', width: '100%', cursor: 'pointer'}}\r\n                        width=\"202px\"\r\n                        height=\"202px\"\r\n                        src={iconUrl}\r\n                    />\r\n                </Spin>\r\n                <div style={{marginLeft: '47px', marginTop: '10px'}}>\r\n                    <ImgCrop\r\n                        rotate\r\n                        modalTitle=\"编辑图片\"\r\n                        modalOk=\"确定\"\r\n                        modalCancel=\"取消\"\r\n                    >\r\n                        <Upload\r\n                            headers={{token: this.state.token}}\r\n                            showUploadList={false}\r\n                           // action=\"https://dtrun.cn/api/user/icon\"\r\n                            action=\"http://127.0.0.1:8080/api/user/icon\"\r\n                            beforeUpload={this.beforeUpload}\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            <Button icon={<UploadOutlined/>}>更换头像</Button>\r\n\r\n                        </Upload>\r\n                    </ImgCrop>\r\n                </div>\r\n                <Menu\r\n                    mode=\"inline\"\r\n                >\r\n                    <Menu.Item key=\"2\" onClick={this.showPasswordDrawer} icon={<EditOutlined/>}>\r\n                        修改密码</Menu.Item>\r\n                    <Menu.Item key=\"3\" onClick={() => this.logout()}\r\n                               icon={<UploadOutlined style={{transform: 'rotate(90deg)'}}/>}>\r\n                        注销\r\n                    </Menu.Item>\r\n                </Menu>\r\n\r\n\r\n                <Drawer\r\n                    title=\"个人中心\"\r\n                    width={400}\r\n                    closable={false}\r\n                    onClose={this.onMessageDrawerClose}\r\n                    visible={this.state.messageDrawer}\r\n                >\r\n                    个人中心\r\n                </Drawer>\r\n\r\n                <Drawer\r\n                    title=\"修改密码\"\r\n                    width={400}\r\n                    closable={false}\r\n                    onClose={this.onPasswordDrawerClose}\r\n                    visible={this.state.passwordDrawer}\r\n                >\r\n                    <Form\r\n                        {...layout}\r\n                        name=\"basic\"\r\n                        onFinish={this.onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"旧密码\"\r\n                            name=\"oldPassword\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输旧密码',\r\n                                },\r\n                            ]}\r\n                        >\r\n\r\n                            <Input type='text'\r\n                                   placeholder=\"请输入旧密码\"/>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"新密码\"\r\n                            name=\"newPassword\"\r\n                            rules={[\r\n                                {\r\n                                    compare: '11111',\r\n                                    required: true,\r\n                                    message: '请输新密码',\r\n                                },\r\n                            ]}\r\n                        >\r\n\r\n                            <input placeholder=\"请输新密码\" type=\"text\" id=\"basic_dtsName\"\r\n                                   class=\"ant-input\" value=\"\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}\r\n                            >\r\n                                确定\r\n                            </Button>\r\n\r\n                            <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                取消\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Drawer>\r\n\r\n            </Drawer>\r\n\r\n            <Layout style={{height: '100%'}}>\r\n                <Spin spinning={loading} size={\"large\"}>\r\n                    <Header className=\"header\"\r\n                            style={{position: 'relative', left: '0', padding: '0', background: '#12202e'}}>\r\n                        <Row>\r\n                        <span style={{\r\n                            color: '#ffffff',\r\n                            textAlign: 'center',\r\n                            width: '200px',\r\n                            fontSize: '20px'\r\n                        }}>DTRUN迁移系统</span>\r\n                            <div onClick={this.showMainDrawer}\r\n                                 style={{position: 'absolute', right: '45px', cursor: 'pointer'}}>\r\n                                <Avatar size={45} src={iconUrl}/>\r\n                                <span style={{marginLeft: '5px', color: '#ffffff', fontSize: '15px'}}>{userName}</span>\r\n                            </div>\r\n                        </Row>\r\n                    </Header>\r\n                </Spin>\r\n                <Layout>\r\n\r\n                    <Sider width={200} className=\"site-layout-background\" style={{\r\n                        overflow: 'auto',\r\n                        height: '100vh',\r\n                        position: 'fixed',\r\n                        left: 0,\r\n                    }}>\r\n                        <Menu\r\n                            mode=\"inline\"\r\n                            // defaultSelectedKeys={['1']}\r\n                            style={{height: '100%', borderRight: 0}}\r\n                        >\r\n                            <Menu.Item key=\"1\" icon={<LaptopOutlined/>}>\r\n                                <NavLink to=\"/dashboard\">运维大盘</NavLink>\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"2\" icon={<FolderOpenOutlined/>}>\r\n                                <NavLink to=\"/datasource\">数据源管理</NavLink></Menu.Item>\r\n                            <Menu.Item key=\"3\" icon={<SplitCellsOutlined/>}>\r\n                                <NavLink to=\"/movetask\">迁移任务管理</NavLink>\r\n                            </Menu.Item>\r\n                            <SubMenu key=\"4\" icon={<SettingOutlined/>} title=\"系统管理\">\r\n                                <Menu.Item key=\"5\"> <NavLink to=\"/sysmanage/logs\">系统日志</NavLink></Menu.Item>\r\n                                <Menu.Item key=\"6\"><NavLink to=\"/sysmanage/whitelist\">白名单管理</NavLink></Menu.Item>\r\n                                <Menu.Item key=\"7\">未知模块</Menu.Item>\r\n                                <Menu.Item key=\"8\">未知模块</Menu.Item>\r\n                            </SubMenu>\r\n                            <SubMenu key=\"9\" icon={<NotificationOutlined/>} title=\"推送配置\">\r\n                                <Menu.Item key=\"10\">邮件配置</Menu.Item>\r\n                                <Menu.Item key=\"11\"> <NavLink to=\"/pushconfig/contact\">联系人配置</NavLink></Menu.Item>\r\n                            </SubMenu>\r\n                            <Menu.Item key=\"12\" icon={<ContactsOutlined/>}>\r\n                                <NavLink to=\"/about\">关于我们</NavLink>\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </Sider>\r\n\r\n                    <Layout style={{padding: '0 14px 14px 14px', height: '100%'}}>\r\n\r\n                        <Content\r\n                            className=\"site-layout-background\"\r\n                            style={{\r\n                                marginLeft: 200,\r\n                                height: '100%'\r\n                            }}\r\n                        >\r\n                            <Switch>\r\n                                <Route path=\"/dashboard\" component={Dashboard}/>\r\n                                <Route path=\"/datasource\" component={Datasource}/>\r\n                                <Route path=\"/movetask\" component={MoveTask}/>\r\n                                <Route path=\"/sysmanage\" component={Sysmanage}/>\r\n                                <Route path=\"/pushconfig\" component={Pushconfig}/>\r\n                                <Route path=\"/about\" component={About}/>\r\n                                <Redirect to=\"/dashboard\"/>\r\n                            </Switch>\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n            </Layout>\r\n\r\n        </div>\r\n\r\n    }\r\n}","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\user\\service.js",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\dashboard\\Dashboard.jsx",["148","149","150","151","152"],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\about\\About.jsx",["153","154","155","156"],"import React, {useEffect, useState} from 'react';\r\nimport {Col, Image, Row, Spin} from 'antd';\r\n\r\nconst About = () => {\r\n    return <div style={{textAlign: 'center', height: '100%', padding: '10px'}}>\r\n        <Row style={{height: '52%'}}>\r\n            <Col span={24} style={{height: '100%'}}>\r\n                <img src='https://gw.alipayobjects.com/mdn/rms_ae7ad9/afts/img/A*-wAhRYnWQscAAAAAAAAAAABkARQnAQ'\r\n                     height='100%'/>\r\n            </Col>\r\n        </Row>\r\n        <Row style={{height: '5%', margin: '5px 0'}}>\r\n            <Col span={24}>\r\n                <div>DTRUN迁移系统是一个无侵入式的对象存储迁移系统,它可以将不同平台的对象存储数据进行平行迁移</div>\r\n                <span>在数据进行迁移的时候不会影响您业务的正常使用并且您无需关注过程,当迁移任务完成后,您将会收到通知</span>\r\n            </Col>\r\n        </Row>\r\n        <Row style={{height: '40%'}}>\r\n            <Col span={6}>\r\n                <Image\r\n                    src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/1.png'\r\n                    placeholder={\r\n                        <Image\r\n                            preview={false}\r\n                            src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/1.png'\r\n                        />\r\n                    }\r\n                />\r\n                <div>支持多种数据源迁移</div>\r\n            </Col>\r\n            <Col span={6}>\r\n                <Image\r\n                    src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/2.png'\r\n                    placeholder={\r\n                        <Image\r\n                            preview={false}\r\n                            src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/2.png'\r\n                        />\r\n                    }\r\n                />\r\n                <div>简单配置，开箱即用</div>\r\n            </Col>\r\n            <Col span={6}> <Image\r\n                src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/4.png'\r\n                placeholder={\r\n                    <Image\r\n                        preview={false}\r\n                        src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/4.png'\r\n                    />\r\n                }\r\n            />\r\n                <div>自动化迁移，无需人工二次干预</div>\r\n            </Col>\r\n            <Col span={6}> <Image\r\n                src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/5.png'\r\n                placeholder={\r\n                    <Image\r\n                        preview={false}\r\n                        src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/5.png'\r\n                    />\r\n                }\r\n            />\r\n                <div>无侵入式设计,迁移时不影响业务使用</div>\r\n            </Col>\r\n\r\n        </Row>\r\n\r\n        <Row style={{height: '3%'}}>\r\n            <Col span={24}>\r\n                <span>© 20017-2021 Dtrun.cn 版权所有</span>\r\n            </Col>\r\n        </Row>\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default About;","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Pushconfig.jsx",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\movetask\\MoveTask.jsx",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Sysmanage.jsx",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\datasource\\Datasource.jsx",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\request.js",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\datasource\\Update.jsx",["157"],"import React from 'react';\r\nimport {getDtSourceById, testconnection, updateDataSource} from './service';\r\nimport {Button, Col, Form, Input, notification, Row, Select} from 'antd';\r\n\r\nconst {Option} = Select;\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 3,\r\n        span: 16,\r\n    },\r\n};\r\nexport default class Update extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount() {\r\n        getDtSourceById({\r\n            id: this.props.match.params.id,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                const data = response.data.data;\r\n                const dtSourceJson = JSON.parse(data.dtSourceJson);\r\n                this.formRef.current.setFieldsValue(\r\n                    {\r\n                        dtsName: data.dtSourceName,\r\n                        dtsType: data.dtSourceType,\r\n                        accessKey: dtSourceJson.accessKey,\r\n                        accessSecret: dtSourceJson.accessSecret,\r\n                        region: dtSourceJson.region\r\n                    },\r\n                );\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取数据源信息失败，请稍后重试',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    test() {\r\n        this.formRef.current.validateFields()\r\n            .then(values => {\r\n                testconnection({\r\n                    dataSourceType: values.dtsType,\r\n                    accessKey: values.accessKey,\r\n                    accessSecret: values.accessSecret,\r\n                    region: values.region,\r\n                }).then((response) => {\r\n                    const result = response.data.message;\r\n                    if (result === 'Success') {\r\n                        notification['success']({\r\n                            message: '通知',\r\n                            description:\r\n                                '测试成功',\r\n                            duration: 1,\r\n                        });\r\n                    } else {\r\n                        notification['error']({\r\n                            message: '通知',\r\n                            description:\r\n                                '测试失败，请检查参数',\r\n                            duration: 1,\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n    quit() {\r\n        this.props.history.goBack();\r\n\r\n    }\r\n\r\n\r\n    onFinish = (values) => {\r\n        updateDataSource({\r\n            id: this.props.match.params.id,\r\n            dataSourceName: values.dtsName,\r\n            dataSourceType: values.dtsType,\r\n            secretId: values.accessKey,\r\n            secretKey: values.accessSecret,\r\n            region: values.region,\r\n        }).then((response) => {\r\n            var result = response.data.message;\r\n            if (result === 'Success') {\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '修改成功',\r\n                    duration: 1,\r\n                });\r\n                this.props.history.push('/datasource/show');\r\n            } else  if (result ==='CreateRepeat'){\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '修改失败，请不要使用重复或已存在的数据源名称',\r\n                    duration: 1,\r\n                });\r\n\r\n            }else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '修改失败，请检查您的参数设置',\r\n                    duration: 1,\r\n                });\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        return <div style={{padding: '10px'}}>\r\n            <h2>修改数据源</h2>\r\n            <Row>\r\n                <Col span={24}>\r\n\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"basic\"\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        onFinish={this.onFinish}\r\n\r\n                    >\r\n                        <Form.Item\r\n                            label=\"数据源名称\"\r\n                            name=\"dtsName\"\r\n\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入数据源名称',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入数据源名称\"/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"dtsType\" label=\"数据源类型\" rules={[{required: true, message: '请选择数据源类型'}]}>\r\n                            <Select\r\n                                placeholder=\"请选择数据源类型\"\r\n                                onChange={this.onGenderChange}\r\n                                allowClear\r\n                            >\r\n                                <Option value=\"cos\">腾讯云COS</Option>\r\n                                <Option value=\"oss\">阿里云OSS</Option>\r\n                                <Option value=\"obs\">华为云OBS</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"AccessKey\"\r\n                            name=\"accessKey\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入AccessKey',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入AccessKey\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"AccessSecret\"\r\n                            name=\"accessSecret\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入AccessSecret',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入AccessSecret\"/>\r\n                        </Form.Item>\r\n\r\n\r\n                        <Form.Item\r\n                            label=\"地域\"\r\n                            name=\"region\"\r\n                            rules={[\r\n                                {\r\n\r\n                                    message: '请输入地域',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入地域\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\r\n                                确定\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.test()} style={{marginRight: '10px'}}>\r\n                                测试\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                取消\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n\r\n            </Row>\r\n        </div>\r\n\r\n\r\n    }\r\n}","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\datasource\\Show.jsx",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Update.jsx",["158","159"],"import React from 'react';\r\nimport { updateWhiteList,getWhiteListById} from '../sysmanage/service'\r\nimport {Button, Col, Form, Input, notification, Row, Select} from 'antd';\r\n\r\nconst {Option} = Select;\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 3,\r\n        span: 16,\r\n    },\r\n};\r\nexport default class Pushconfig extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount() {\r\n        getWhiteListById({\r\n            id: this.props.match.params.id,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                const data = response.data.data;\r\n                this.formRef.current.setFieldsValue(\r\n                    {\r\n                        ip: data.ip,\r\n                    },\r\n                );\r\n            }\r\n            else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取信息失败，请稍后重试',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    quit() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n\r\n    onFinish = (values) => {\r\n        updateWhiteList({\r\n            id: this.props.match.params.id,\r\n            ip: values.ip,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.props.history.push('/sysmanage/whitelist');\r\n            } else if (result==='CreateRepeat'){\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        'ip地址已存在,请重新输入',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return <div style={{padding: '10px'}}>\r\n            <h2>修改白名单</h2>\r\n            <Row>\r\n                <Col span={20}>\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"basic\"\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        onFinish={this.onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"ip地址\"\r\n                            name=\"ip\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入ip地址',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入ip地址\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\r\n                                确定\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                取消\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    }\r\n}\r\n","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\datasource\\Create.jsx",["160","161","162","163","164","165","166","167"],"import React from 'react';\r\nimport {createDataSource, testconnection} from './service';\r\nimport {Button, Col, Form, Input, notification, Row, Select,Tooltip,Space,Typography} from 'antd';\r\nimport {LockOutlined, UserOutlined,QuestionCircleOutlined} from '@ant-design/icons';\r\nconst {Option} = Select;\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 3,\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst text = <span>prompt text</span>;\r\n\r\n\r\nexport default class Create extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    test() {\r\n        this.formRef.current.validateFields()\r\n            .then(values => {\r\n                testconnection({\r\n                    dataSourceType: values.dtsType,\r\n                    accessKey: values.accessKey,\r\n                    accessSecret: values.accessSecret,\r\n                    region: values.region,\r\n                }).then((response) => {\r\n                    const result = response.data.message;\r\n                    if (result === 'Success') {\r\n                        notification['success']({\r\n                            message: '通知',\r\n                            description:\r\n                                '测试成功',\r\n                            duration: 1,\r\n                        });\r\n                    } else {\r\n                        notification['error']({\r\n                            message: '通知',\r\n                            description:\r\n                                '测试失败,请检查参数',\r\n                            duration: 1,\r\n                        });\r\n                    }\r\n                });\r\n            })\r\n            .catch(errorInfo => {\r\n\r\n            });\r\n\r\n    }\r\n\r\n    quit() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onFinish = (values) => {\r\n        createDataSource({\r\n            dataSourceName: values.dtsName,\r\n            dataSourceType: values.dtsType,\r\n            secretId: values.accessKey,\r\n            secretKey: values.accessSecret,\r\n            region: values.region,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.props.history.push('/datasource/show');\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建成功',\r\n                    duration: 1,\r\n                });\r\n            } else  if (result ==='CreateRepeat'){\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建失败，请不要使用已存在的数据源名称',\r\n                    duration: 1,\r\n                });\r\n\r\n            }else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建失败，请检查您的参数设置',\r\n                    duration: 1,\r\n                });\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return <div style={{padding: '10px'}}>\r\n            <h2>创建数据源</h2>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"basic\"\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        onFinish={this.onFinish}\r\n                    >\r\n                            <Form.Item\r\n                                label=\"数据源名称\"\r\n                                name=\"dtsName\"\r\n                                tooltip=\"请不要使用重复的数据源名称\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: '请输入数据源名称',\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input  style={{ width: 600 }} placeholder=\"请输入数据源名称\"/>\r\n                            </Form.Item>\r\n\r\n                        <Form.Item\r\n                            tooltip=\"COS：腾讯云数据源类型，OSS：阿里云数据源类型，OBS:华为云数据源类型，BOS：百度云数据源类型\" name=\"dtsType\" label=\"数据源类型\" rules={[{required: true, message: '请选择数据源类型'}]}>\r\n                            <Select\r\n\r\n                                style={{ width: 600 }}\r\n                                placeholder=\"请选择数据源类型\"\r\n                                onChange={this.onGenderChange}\r\n                                allowClear\r\n\r\n                            >\r\n                                <Option value=\"cos\">腾讯云COS</Option>\r\n                                <Option value=\"oss\">阿里云OSS</Option>\r\n                                <Option value=\"obs\">华为云OBS</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            tooltip=\" 登录云服务网站后在API 密钥中查看,API 密钥是构建云 API 请求的重要凭证，使用 API 可以操作您名下的所有云资源。\"\r\n                            label=\"AccessKey\"\r\n                            name=\"accessKey\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入AccessKey',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input  style={{ width: 600 }}  placeholder=\"请输入AccessKey\"/>\r\n\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            tooltip=\" 登录云服务网站后在API 密钥中查看,API 密钥是构建云 API 请求的重要凭证，使用 API 可以操作您名下的所有云资源。\"\r\n                            label=\"AccessSecret\"\r\n                            name=\"accessSecret\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入AccessSecret',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input  style={{ width: 600 }}  placeholder=\"请输入AccessSecret\"/>\r\n\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            tooltip=\"登录云服务网站后在对象存储中的 Bucket 列表 可查看所有数据源地域\"\r\n                            label=\"地域\"\r\n                            name=\"region\"\r\n                            rules={[\r\n                                {\r\n\r\n                                    message: '请输入地域',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input  style={{ width: 600 }}  placeholder=\"请输入地域\"/>\r\n\r\n                        </Form.Item>\r\n\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\r\n                                确定\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.test()} style={{marginRight: '10px'}}>\r\n                                测试\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                取消\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n\r\n            </Row>\r\n        </div>\r\n\r\n    }\r\n}","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Create.jsx",["168","169"],"import React from 'react';\r\nimport {Button, Col, Form, Input, notification, Row, Select} from 'antd';\r\nimport {createWhiteList} from \"../sysmanage/service\";\r\n\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 3,\r\n        span: 16,\r\n    },\r\n};\r\n\r\nexport default class Whitelist extends React.Component {\r\n    formRef = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    quit() {\r\n        this.props.history.goBack();\r\n    }\r\n    onFinish = (values) => {\r\n        createWhiteList({\r\n            ip: values.ip,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.props.history.push('/sysmanage/whitelist');\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建失败，ip地址已存在,此ip可以登录',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return <div style={{padding: '10px'}}>\r\n            <h2>创建白名单</h2>\r\n            <Row>\r\n                   <Col span={20}>\r\n                       <Form\r\n                           {...layout}\r\n                           ref={this.formRef}\r\n                           name=\"basic\"\r\n                           initialValues={{\r\n                               remember: true,\r\n                           }}\r\n                           onFinish={this.onFinish}\r\n                       >\r\n                           <Form.Item\r\n                               label=\"IP地址\"\r\n                               name=\"ip\"\r\n                               rules={[\r\n                                   {\r\n                                       required: true,\r\n                                       message: '请输入ip地址',\r\n                                   },\r\n                               ]}\r\n                           >\r\n                               <Input placeholder=\"请输入ip地址\"/>\r\n                           </Form.Item>\r\n\r\n                           <Form.Item {...tailLayout}>\r\n                               <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\r\n                                   确定\r\n                               </Button>\r\n                               <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                   取消\r\n                               </Button>\r\n                           </Form.Item>\r\n                       </Form>\r\n                   </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    }\r\n}\r\n","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Logs.jsx",["170","171"],"import React, {useEffect, useState} from 'react';\r\nimport {notification, Timeline, Empty, Menu, Dropdown, message} from 'antd';\r\nimport {getLogsById, getColorById} from './service';\r\nimport {DownOutlined} from '@ant-design/icons';\r\n\r\nconst Logs = () => {\r\n\r\n    const [list, setList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getLogsById()\r\n            .then((response) => {\r\n                const result = response.data.message;\r\n                if (result === 'Success') {\r\n                    setList(response.data.data)\r\n                } else {\r\n                    notification['error']({\r\n                        message: '通知',\r\n                        description:\r\n                            '获取数据源列表失败，请检查数据源配置',\r\n                        duration: 2,\r\n                    });\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    const onClick = ({key}) => {\r\n        getColorById({key}).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '查看失败',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    const menu = (\r\n        <Menu onClick={onClick}>\r\n            <Menu.Item key=\"all\">全部日志</Menu.Item>\r\n            <Menu.Item key=\"green\">登录日志</Menu.Item>\r\n            <Menu.Item key=\"blue\">常规日志</Menu.Item>\r\n            <Menu.Item key=\"orange\">取消日志</Menu.Item>\r\n            <Menu.Item key=\"red\">删除日志</Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n\r\n    return <div style={{height: '100%', padding: '10px 10px 0 10px'}}>\r\n        <Dropdown overlay={menu}>\r\n            <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\r\n                筛选日志 <DownOutlined/>\r\n            </a>\r\n        </Dropdown>\r\n\r\n        {\r\n            list.length === 0 ? <Empty style={{position: 'absolute', top: '40%', left: '50%'}}/> :\r\n                <Timeline style={{height: '100%', textAlign: 'left', padding: '20px 10px 0 10px', overflowY: ' auto'}}>\r\n                    {\r\n                        list.map((item, index) => {\r\n                            return <Timeline.Item color={item.color}\r\n                                                  key={index}>{item.log}---{item.createTime}</Timeline.Item>\r\n                        })\r\n                    }\r\n                </Timeline>\r\n        }\r\n\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default Logs;","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\movetask\\Show.jsx",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Contact.jsx",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Whitelist.jsx",["172"],"import React, {useEffect, useState} from 'react';\r\nimport { findAll,deletes} from \"./service\";\r\nimport {Button, Modal, notification, Space, Spin, Table} from \"antd\";\r\nimport {connection} from \"../datasource/service\";\r\n\r\n\r\nconst Whitelist = (props) => {\r\n    const [list, setList] = useState([]);\r\n    const [WhiteListId, setWhiteListId] = useState([]);\r\n    const [visible, setVisible] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [modalText, setModalText] = useState('');\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\r\n\r\n\r\n    const handleCancel = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        fentch();\r\n    }, []);\r\n\r\n\r\n    const fentch = () => {\r\n        setLoading(true)\r\n        findAll().then((response) => {\r\n            const result = response.data.message;\r\n            const data = response.data.data;\r\n            if (result === 'Success') {\r\n                setList(data);\r\n                setLoading(false)\r\n            } else {\r\n                setLoading(false)\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const toCreate = () => {\r\n        props.history.push('/sysmanage/create')\r\n    }\r\n\r\n    const testDts = (id) => {\r\n        setLoading(true)\r\n        connection({\r\n            id: id,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setLoading(false)\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '测试成功',\r\n                    duration: 1,\r\n                });\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '测试失败，请检查您的参数设置',\r\n                    duration: 1,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    const deleteWhiteList = (id) => {\r\n        const selecteLength = selectedRowKeys.length;\r\n        if (selecteLength <= 1) {\r\n            setModalText('您确定要删除吗?');\r\n            const idArray = [];\r\n            idArray.push(id)\r\n            setWhiteListId(idArray);\r\n        } else {\r\n            setModalText('您确定要删除选中的' + selecteLength + '个ip地址吗?');\r\n            setWhiteListId(selectedRowKeys);\r\n        }\r\n        setVisible(true);\r\n\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setConfirmLoading(true);\r\n        deletes({\r\n            data: {\r\n                id: WhiteListId,\r\n            }\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setWhiteListId([]);\r\n                setVisible(false);\r\n                setConfirmLoading(false);\r\n                fentch();\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '删除成功',\r\n                    duration: 1,\r\n                });\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '删除失败',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    const updateDts = (id) => {\r\n        props.history.push('/sysmanage/update/'+ id )\r\n    }\r\n\r\n\r\n    const columns = [\r\n        {\r\n            title: 'IP地址',\r\n            dataIndex: 'ip',\r\n            render: (text, record) => <span style={{color: '#0062FF', cursor: 'pointer'}}\r\n                                            onClick={() => updateDts(record.id)}>{text}</span>,\r\n        },\r\n\r\n        {\r\n            title: '创建时间',\r\n            dataIndex: 'createTime',\r\n        },\r\n        {\r\n            title: '操作',\r\n            dataIndex: 'option',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <span style={{color: '#0062FF', cursor: 'pointer', marginRight: '10px'}}\r\n                          onClick={() => deleteWhiteList(record.id, record.contactName)}>删除</span>\r\n                </Space>\r\n            )\r\n        },\r\n    ];\r\n\r\n    const onSelectChange = selectedRowKeys => {\r\n        setSelectedRowKeys(selectedRowKeys)\r\n    };\r\n\r\n    const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: onSelectChange,\r\n    };\r\n\r\n    return ((\r\n        <Spin size=\"large\" spinning={loading}>\r\n            <div style={{height: '50px', paddingTop: '10px'}}>\r\n                <Button type=\"primary\" onClick={() => fentch()}\r\n                        style={{\r\n                            background: '#00b4ed',\r\n                            position: 'absolute',\r\n                            right: '83px',\r\n                            zIndex: '999',\r\n                            borderRadius: '5px'\r\n                        }}\r\n                >刷新</Button>\r\n                <Button type=\"primary\" onClick={() => toCreate()}\r\n                        style={{\r\n                            background: '#00b4ed',\r\n                            position: 'absolute',\r\n                            right: '11px',\r\n                            zIndex: '999',\r\n                            borderRadius: '5px'\r\n                        }}\r\n                >创建</Button></div>\r\n            <div style={{height: '10px', background: '#f0f2f5'}}></div>\r\n            <div style={{padding: '10px', background: '#ffffff'}}>\r\n                <div>\r\n                    <Table rowSelection={rowSelection} bordered\r\n                           columns={columns}\r\n                           dataSource={list}\r\n                           pagination={{\r\n                               showQuickJumper: true,\r\n                               defaultPageSize: 10,\r\n                               pageSizeOptions: [10, 20, 50, 100]\r\n                           }}\r\n                    />\r\n                </div>\r\n                <Modal\r\n                    title=\"删除ip地址\"\r\n                    okText=\"确定\"\r\n                    cancelText=\"取消\"\r\n                    visible={visible}\r\n                    onOk={handleOk}\r\n                    confirmLoading={confirmLoading}\r\n                    onCancel={handleCancel}\r\n                >\r\n                    <p>{modalText}</p>\r\n                </Modal>\r\n            </div>\r\n        </Spin>\r\n    ));\r\n\r\n}\r\n\r\nexport default Whitelist;\r\n\r\n\r\n","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Create.jsx",["173","174"],"import React from 'react';\r\nimport {Button, Col, Form, Input, notification, Row, Select} from 'antd';\r\nimport {createContact} from \"../pushconfig/service\";\r\n\r\nconst {Option} = Select;\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 3,\r\n        span: 16,\r\n    },\r\n};\r\n\r\nexport default class Pushconfig extends React.Component {\r\n    formRef = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    quit() {\r\n        this.props.history.goBack();\r\n    }\r\n    onFinish = (values) => {\r\n        createContact({\r\n            contactName: values.contactName,\r\n            contactEmail: values.contactEmail,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.props.history.push('/pushconfig/contact');\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建成功',\r\n                    duration: 1,\r\n                });\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建失败，联系人已存在',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return <div style={{padding: '10px'}}>\r\n            <h2>创建联系人</h2>\r\n            <Row>\r\n                   <Col span={20}>\r\n                       <Form\r\n                           {...layout}\r\n                           ref={this.formRef}\r\n                           name=\"basic\"\r\n                           initialValues={{\r\n                               remember: true,\r\n                           }}\r\n                           onFinish={this.onFinish}\r\n                       >\r\n                           <Form.Item\r\n                               tooltip=\"请输入联系人名称\"\r\n                               label=\"联系人名称\"\r\n                               name=\"contactName\"\r\n                               rules={[\r\n                                   {\r\n                                       required: true,\r\n                                       message: '请输入联系人名称',\r\n                                   },\r\n                               ]}\r\n                           >\r\n                               <Input placeholder=\"请输入联系人名称\"/>\r\n                           </Form.Item>\r\n\r\n                           <Form.Item\r\n                               tooltip=\"请输入正确格式的邮箱地址\"\r\n                               name=\"contactEmail\"\r\n                               label=\"联系人邮箱\"\r\n                               rules={[\r\n                                   {\r\n                                       type: 'email',\r\n                                       message: '请输入正确格式的邮箱地址',\r\n                                   },\r\n                                   {\r\n                                       required: true,\r\n                                       message: '请输入联系人邮箱',\r\n                                   },\r\n                               ]}\r\n                           >\r\n                               <Input placeholder=\"请输入联系人邮箱\"/>\r\n                           </Form.Item>\r\n                           <Form.Item {...tailLayout}>\r\n                               <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\r\n                                   确定\r\n                               </Button>\r\n                               <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                   取消\r\n                               </Button>\r\n                           </Form.Item>\r\n                       </Form>\r\n                   </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    }\r\n}\r\n","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\movetask\\Update.jsx",["175","176"],"import {Button, Checkbox, Divider, Form, Input, notification, Popover, Select, Spin, Steps} from 'antd';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {createBucket, getAllDtSourceName, getBucketLists} from '../datasource/service';\r\nimport {getMoveTaskById, updateMoveTask} from './service';\r\nimport {PlusOutlined} from '@ant-design/icons';\r\n\r\nconst {Step} = Steps;\r\nconst {Option} = Select;\r\nconst layout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\n\r\n\r\nconst Update = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [current, setCurrent] = useState(0);\r\n    const [data, setData] = useState({});\r\n    const [checked, setChecked] = useState(true);\r\n    const [dtsList, setDtsList] = useState([]);\r\n    const [srcBucketList, setSrcBucketList] = useState([]);\r\n    const [desBucketList, setDesBucketList] = useState([]);\r\n    const [showAddBucket, setShowAddBucket] = useState(false);\r\n    const [newBucketName, setNewBucketName] = useState([]);\r\n\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        getAllDtSourceName().then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setDtsList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取数据源列表失败，请检查数据源配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n        getMoveTaskById({\r\n            id: props.match.params.id\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            const data = response.data.data;\r\n            if (result === 'Success') {\r\n                const taskJson = JSON.parse(data.taskJson);\r\n                form.setFieldsValue({srcBucket: taskJson.srcBucket})\r\n                form.setFieldsValue({desBucket: taskJson.desBucket})\r\n                setChecked(taskJson.allMove !== 'false')\r\n                form.setFieldsValue({srcId: parseInt(taskJson.srcId)})\r\n                form.setFieldsValue({desId: parseInt(taskJson.desId)})\r\n                form.setFieldsValue({taskName: data.taskName})\r\n                srcChange(parseInt(taskJson.srcId), false);\r\n                desChange(parseInt(taskJson.desId), false)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取迁移任务失败，请检查配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }, []);\r\n\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n\r\n    const onChange = () => {\r\n        setChecked(!checked)\r\n    }\r\n\r\n    const srcChange = (id, flag) => {\r\n        setLoading(true)\r\n        if (flag !== false) {\r\n            form.setFieldsValue({srcBucket: undefined})\r\n            setSrcBucketList([])\r\n        }\r\n        getBucketLists({\r\n            id: id,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setSrcBucketList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取Bucket列表失败，请检查数据源配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    const desChange = (id, flag) => {\r\n        setLoading(true)\r\n        if (flag) {\r\n            form.setFieldsValue({desBucket: undefined})\r\n            setDesBucketList([])\r\n        }\r\n        getBucketLists({\r\n            id: id\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setDesBucketList(response.data.data)\r\n                setShowAddBucket(true)\r\n            } else {\r\n                setShowAddBucket(false)\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取Bucket列表失败，请检查数据源配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    const addItem = () => {\r\n        const desId = form.getFieldValue('desId');\r\n        //发请求创建新的Bucket\r\n        createBucket({\r\n            desId: desId,\r\n            newBucketName: newBucketName,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setNewBucketName([])\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建Bucket成功',\r\n                    duration: 2,\r\n                });\r\n                setDesBucketList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建Bucket列表失败，请检查配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    const quit = () => {\r\n        props.history.goBack();\r\n\r\n    }\r\n\r\n    const onNameChange = event => {\r\n        setNewBucketName(event.target.value)\r\n    }\r\n\r\n    const srcOnFinish = values => {\r\n        setData({...data, 'src': values, 'allMove': checked})\r\n        setCurrent(current + 1);\r\n    };\r\n\r\n    const desOnFinish = values => {\r\n        setData({...data, 'des': values})\r\n        setCurrent(current + 1);\r\n    };\r\n\r\n    const OnFinish = values => {\r\n        const body = {...data, 'option': values}\r\n        updateMoveTask({\r\n            id: props.match.params.id,\r\n            srcId: body.src.srcId,\r\n            srcBucket: body.src.srcBucket,\r\n            desId: body.des.desId,\r\n            desBucket: body.des.desBucket,\r\n            allMove: body.allMove,\r\n            taskName: body.option.taskName,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '修改迁移任务成功',\r\n                    duration: 2,\r\n                });\r\n                props.history.push('/movetask/show');\r\n            }else if(result === 'CreateRepeat'){\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '请不要使用重复的迁移任务名称',\r\n                    duration: 2,\r\n                });\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '修改迁移任务失败，请检查配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    const steps = [\r\n        {\r\n            title: '选择起始数据源',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                form={form}\r\n                onFinish={srcOnFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"起始\"\r\n                    name=\"srcId\"\r\n                    rules={[{required: true, message: '请选择数据源'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择数据源\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        onChange={srcChange}\r\n                    >\r\n                        {\r\n                            dtsList.map((item, index) =>\r\n                                <Option key={index} value={item.id}>{item.dtSourceName}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"srcBucket\"\r\n                    label=\"Bucket\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}>\r\n                    <Select\r\n                        placeholder=\"请选择Bucket\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                    >\r\n                        {\r\n                            srcBucketList.map((item, index) =>\r\n                                <Option key={index} value={item}>{item}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"全量迁移\">\r\n                    <Checkbox onChange={onChange} checked={checked}></Checkbox>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0 10px 0 25%'}}>\r\n                        下一步\r\n                    </Button>\r\n                    <Button htmlType=\"button\" onClick={() => quit()}>\r\n                        取消\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n        {\r\n            title: '选择目的数据源',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                form={form}\r\n                onFinish={desOnFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"目的数据源\"\r\n                    name=\"desId\"\r\n                    rules={[{required: true, message: '请选择数据源'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择数据源\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        onChange={desChange}\r\n                    >\r\n                        {\r\n                            dtsList.map((item, index) =>\r\n                                <Option key={index} value={item.id}>{item.dtSourceName}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"desBucket\"\r\n                    label=\"Bucket\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择Bucket\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                                {menu}\r\n                                {showAddBucket && <div>\r\n                                    <Divider style={{margin: '4px 0'}}/>\r\n                                    <div style={{display: 'flex', flexWrap: 'nowrap', padding: 8}}>\r\n                                        <Input style={{flex: 'auto'}} value={newBucketName} onChange={onNameChange}/>\r\n                                        <a\r\n                                            style={{flex: 'none', padding: '8px', display: 'block', cursor: 'pointer'}}\r\n                                            onClick={addItem}\r\n                                        >\r\n                                            <PlusOutlined/> 创建Bucket\r\n                                        </a>\r\n                                    </div>\r\n                                </div>}\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {\r\n                            desBucketList.map((item, index) =>\r\n                                <Option key={index} value={item}>{item}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0 10px 0 25%'}}>\r\n                        下一步\r\n                    </Button>\r\n                    <Button type=\"primary\" htmlType=\"button\" onClick={prev}>\r\n                        上一步\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n        {\r\n            title: '参数设置',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                onFinish={OnFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"任务名称\"\r\n                    name=\"taskName\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}\r\n                >\r\n                    <Input placeholder=\"请输入任务名称\"/>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0 10px 0 25%'}}>\r\n                        确定\r\n                    </Button>\r\n                    <Button type=\"primary\" htmlType=\"button\" onClick={prev}>\r\n                        上一步\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n    ];\r\n\r\n\r\n    const customDot = (dot, {status, index}) => (\r\n        <Popover\r\n            content={\r\n                <span>\r\n              step {index}\r\n            </span>\r\n            }\r\n        >\r\n            {dot}\r\n        </Popover>\r\n    );\r\n\r\n\r\n    return <Spin size=\"large\" spinning={loading}>\r\n        <Steps forcerender=\"true\" progressDot={customDot} current={current}>\r\n            {steps.map(item => (\r\n                <Step key={item.title} title={item.title}/>\r\n            ))}\r\n        </Steps>\r\n        <div className=\"steps-content\">{steps[current].content}\r\n            <div className=\"steps-action\">\r\n            </div>\r\n        </div>\r\n    </Spin>\r\n}\r\n\r\n\r\nexport default Update;","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Update.jsx",["177","178"],"import React from 'react';\r\nimport {updateContact, getContactById} from '../pushconfig/service'\r\nimport {Button, Col, Form, Input, notification, Row, Select} from 'antd';\r\n\r\nconst {Option} = Select;\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 3,\r\n        span: 16,\r\n    },\r\n};\r\nexport default class Pushconfig extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount() {\r\n        getContactById({\r\n            id: this.props.match.params.id,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                const data = response.data.data;\r\n                this.formRef.current.setFieldsValue(\r\n                    {\r\n                        contactName: data.contactName,\r\n                        contactEmail: data.contactEmail,\r\n                    },\r\n                );\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取联系人信息失败，请稍后重试',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    quit() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n\r\n    onFinish = (values) => {\r\n        updateContact({\r\n            id: this.props.match.params.id,\r\n            contactName: values.contactName,\r\n            contactEmail: values.contactEmail,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.props.history.push('/pushconfig/contact');\r\n            } else if(result === 'CreateRepeat') {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '联系人名称已存在，请重新输入',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    };\r\n    render() {\r\n        return <div style={{padding: '10px'}}>\r\n            <h2>修改联系人</h2>\r\n            <Row>\r\n                <Col span={20}>\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"basic\"\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        onFinish={this.onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"联系人名称\"\r\n                            name=\"contactName\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入联系人名称',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入联系人名称\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"contactEmail\"\r\n                            label=\"联系人邮箱\"\r\n                            rules={[\r\n                                {\r\n                                    type: 'email',\r\n                                    message: '请输入正确格式的邮箱地址',\r\n                                },\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入联系人邮箱',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入联系人邮箱\"/>\r\n                        </Form.Item>\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\r\n                                确定\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                取消\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    }\r\n}\r\n","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\movetask\\Create.jsx",["179"],"import {Button, Checkbox, Divider, Form, Input, notification, Popover, Select, Spin, Steps} from 'antd';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {createBucket, getAllDtSourceName, getBucketLists} from '../datasource/service';\r\nimport {getContactLists} from '../pushconfig/service';\r\nimport {createMoveTask} from './service';\r\nimport {PlusOutlined} from '@ant-design/icons';\r\n\r\nconst {Step} = Steps;\r\nconst {Option} = Select;\r\nconst layout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\n\r\n\r\nconst Create = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [current, setCurrent] = useState(0);\r\n    const [data, setData] = useState({});\r\n    const [checked, setChecked] = useState(true);\r\n    const [contactChecked, setContactChecked] = useState(false);\r\n    const [dtsList, setDtsList] = useState([]);\r\n    const [srcBucketList, setSrcBucketList] = useState([]);\r\n    const [desBucketList, setDesBucketList] = useState([]);\r\n    const [contactList, setContactList] = useState([]);\r\n    const [showAddBucket, setShowAddBucket] = useState(false);\r\n    const [newBucketName, setNewBucketName] = useState([]);\r\n\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        getAllDtSourceName()\r\n            .then((response) => {\r\n                const result = response.data.message;\r\n                if (result === 'Success') {\r\n                    setDtsList(response.data.data)\r\n                } else {\r\n                    notification['error']({\r\n                        message: '通知',\r\n                        description:\r\n                            '获取数据源列表失败，请检查数据源配置',\r\n                        duration: 2,\r\n                    });\r\n                }\r\n                setLoading(false)\r\n            });\r\n    }, []);\r\n\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n\r\n    const onChange = () => {\r\n        setChecked(!checked)\r\n    }\r\n    const contactChange = () => {\r\n        setContactChecked(!contactChecked)\r\n    }\r\n\r\n    const srcChange = (id) => {\r\n        setLoading(true)\r\n        form.setFieldsValue({srcBucket: undefined})\r\n        setSrcBucketList([])\r\n        getBucketLists({\r\n            id: id\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setSrcBucketList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取Bucket列表失败，请检查数据源配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    const desChange = (id) => {\r\n        setLoading(true)\r\n        form.setFieldsValue({desBucket: undefined})\r\n        setDesBucketList([])\r\n        getBucketLists({\r\n            id: id\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setDesBucketList(response.data.data)\r\n                setShowAddBucket(true)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取Bucket列表失败，请检查数据源配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    const onContactFocus = (id) => {\r\n        setLoading(true)\r\n        form.setFieldsValue({desBucket: undefined})\r\n        setDesBucketList([])\r\n        getContactLists({\r\n            id: 42\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setContactList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取联系人列表失败，请检查网络配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    const addItem = () => {\r\n        const desId = form.getFieldValue('desId');\r\n        createBucket({\r\n            desId: desId,\r\n            newBucketName: newBucketName,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setNewBucketName([])\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建Bucket成功',\r\n                    duration: 2,\r\n                });\r\n                setDesBucketList(response.data.data)\r\n            }\r\n            else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建Bucket列表失败，请检查配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    const quit = () => {\r\n        props.history.goBack();\r\n\r\n    }\r\n\r\n    const onNameChange = event => {\r\n        setNewBucketName(event.target.value)\r\n    }\r\n\r\n    const srcOnFinish = values => {\r\n        setData({...data, 'src': values, 'allMove': checked})\r\n        setCurrent(current + 1);\r\n    };\r\n\r\n    const desOnFinish = values => {\r\n        setData({...data, 'des': values})\r\n        setCurrent(current + 1);\r\n    };\r\n\r\n    const onContactChange = values => {\r\n        setData({...data, 'contact': values})\r\n    };\r\n\r\n\r\n    const OnFinish = values => {\r\n        const body = {...data, 'option': values}\r\n        createMoveTask({\r\n            srcId: body.src.srcId,\r\n            srcBucket: body.src.srcBucket,\r\n            fileNameStart: body.src.fileNameStart,\r\n            fileNameEnd: body.src.fileNameEnd,\r\n            desId: body.des.desId,\r\n            desBucket: body.des.desBucket,\r\n            allMove: body.allMove,\r\n            taskName: body.option.taskName,\r\n            sendMail: contactChecked,\r\n            contact: body.contact,\r\n        })\r\n            .then((response) => {\r\n                const result = response.data.message;\r\n                if (result === 'Success') {\r\n                    notification['success']({\r\n                        message: '通知',\r\n                        description:\r\n                            '创建迁移任务成功',\r\n                        duration: 2,\r\n                    });\r\n                    props.history.push('/movetask/show');\r\n                } else if(result === 'CreateRepeat'){\r\n                    notification['error']({\r\n                        message: '通知',\r\n                        description:\r\n                            '请不要重复使用迁移任务名称',\r\n                        duration: 2,\r\n                    });\r\n                }\r\n                else {\r\n                    notification['error']({\r\n                        message: '通知',\r\n                        description:\r\n                            '创建迁移任务失败，请检查配置',\r\n                        duration: 2,\r\n                    });\r\n                }\r\n            });\r\n    };\r\n\r\n\r\n    const steps = [\r\n        {\r\n            title: '选择初始数据源',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                form={form}\r\n                onFinish={srcOnFinish}\r\n            >\r\n                <Form.Item\r\n                    tooltip=\"选择源端数据源\"\r\n                    label=\"数据源\"\r\n                    name=\"srcId\"\r\n                    rules={[{required: true, message: '请选择数据源'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择数据源\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        onChange={srcChange}\r\n                    >\r\n                        {\r\n                            dtsList.map((item, index) =>\r\n                                <Option key={index} value={item.id}>{item.dtSourceName}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    tooltip=\"选择你所要迁移的Bucket\"\r\n                    name=\"srcBucket\"\r\n                    label=\"Bucket\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}>\r\n                    <Select\r\n                        placeholder=\"请选择Bucket\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                    >\r\n                        {\r\n                            srcBucketList.map((item, index) =>\r\n                                <Option key={index} value={item}>{item}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"全量迁移\">\r\n                    <Checkbox onChange={onChange} checked={checked}></Checkbox>\r\n                </Form.Item>\r\n\r\n                {!checked &&\r\n                <div>\r\n                    <Form.Item\r\n                        label=\"请输入文件名前缀\"\r\n                        name=\"fileNameStart\"\r\n                    >\r\n                        <Input placeholder=\"请输入文件名前缀\"/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"请输入文件名后缀\"\r\n                        name=\"fileNameEnd\"\r\n                    >\r\n                        <Input placeholder=\"请输入文件名后缀\"/>\r\n                    </Form.Item>\r\n                </div>\r\n                }\r\n\r\n\r\n                <Form.Item>\r\n                    <Button htmlType=\"button\" style={{margin: '0 10px 0 25%'}} onClick={() => quit()}>\r\n                        取消\r\n                    </Button>\r\n                    <Button type=\"primary\" htmlType=\"submit\" >\r\n                        下一步\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n        {\r\n            title: '选择目的数据源',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                form={form}\r\n                onFinish={desOnFinish}\r\n            >\r\n                <Form.Item\r\n                    tooltip=\"选择目的数据源\"\r\n                    label=\"数据源\"\r\n                    name=\"desId\"\r\n                    rules={[{required: true, message: '请选择数据源'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择数据源\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        onChange={desChange}\r\n                    >\r\n                        {\r\n                            dtsList.map((item, index) =>\r\n                                <Option key={index} value={item.id}>{item.dtSourceName}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    tooltip=\"选择你所需要迁移到的Bucket\"\r\n                    name=\"desBucket\"\r\n                    label=\"Bucket\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择Bucket\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                                {menu}\r\n                                {showAddBucket && <div>\r\n                                    <Divider style={{margin: '4px 0'}}/>\r\n                                    <div style={{display: 'flex', flexWrap: 'nowrap', padding: 8}}>\r\n                                        <Input style={{flex: 'auto'}} value={newBucketName} onChange={onNameChange}/>\r\n                                        <a\r\n                                            style={{flex: 'none', padding: '8px', display: 'block', cursor: 'pointer'}}\r\n                                            onClick={addItem}\r\n                                        >\r\n                                            <PlusOutlined/> 创建Bucket\r\n                                        </a>\r\n                                    </div>\r\n                                </div>}\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {\r\n                            desBucketList.map((item, index) =>\r\n                                <Option key={index} value={item}>{item}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"button\" style={{margin: '0 10px 0 25%'}}  onClick={prev}>\r\n                        上一步\r\n                    </Button>\r\n                    <Button type=\"primary\" htmlType=\"submit\" >\r\n                        下一步\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n        {\r\n            title: '参数设置',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                onFinish={OnFinish}\r\n            >\r\n                <Form.Item\r\n                    tooltip=\"请输入迁移任务名称\"\r\n                    label=\"迁移任务名称\"\r\n                    name=\"taskName\"\r\n                    rules={[{required: true, message: '请输入迁移任务名称'}]}\r\n                >\r\n                    <Input placeholder=\"请输入迁移任务名称\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"任务完成通知\" name=\"sendMail\">\r\n                    <Checkbox onChange={contactChange} checked={contactChecked}></Checkbox>\r\n                </Form.Item>\r\n\r\n                {contactChecked &&\r\n                <Form.Item\r\n                    tooltip=\"在推送配置中,可创建联系人\"\r\n                    name=\"email\" label=\"联系人\" rules={[{required: true, message: '请选择联系人'}]}>\r\n                    <Select\r\n                        placeholder=\"请选择联系人\"\r\n                        allowClear\r\n                        onFocus={onContactFocus}\r\n                        onChange={onContactChange}\r\n                    >\r\n                        {\r\n                            contactList.map((item, index) =>\r\n                                <Option key={index} value={item.contactEmail}>{item.contactName}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n                }\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0 10px 0 25%'}}>\r\n                        确定\r\n                    </Button>\r\n                    <Button type=\"primary\" htmlType=\"button\" onClick={prev}>\r\n                        上一步\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n    ];\r\n\r\n\r\n    const customDot = (dot, {status, index}) => (\r\n        <Popover\r\n            content={\r\n                <span>\r\n              step {index}\r\n            </span>\r\n            }\r\n        >\r\n            {dot}\r\n        </Popover>\r\n    );\r\n\r\n\r\n    return <Spin size=\"large\" spinning={loading}>\r\n        <Steps forcerender=\"true\" progressDot={customDot} current={current}>\r\n            {steps.map(item => (\r\n                <Step key={item.title} title={item.title}/>\r\n            ))}\r\n        </Steps>\r\n        <div className=\"steps-content\">{steps[current].content}\r\n            <div className=\"steps-action\">\r\n            </div>\r\n        </div>\r\n    </Spin>\r\n}\r\n\r\n\r\nexport default Create;","C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\datasource\\service.js",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\service.js",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\movetask\\service.js",[],"C:\\Users\\Xiaoxiaoxuan\\ideaProject\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\service.js",[],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":9,"column":15,"nodeType":"186","messageId":"187","endLine":9,"endColumn":30},{"ruleId":"184","severity":1,"message":"185","line":11,"column":16,"nodeType":"186","messageId":"187","endLine":11,"endColumn":46},{"ruleId":"188","severity":1,"message":"189","line":4,"column":17,"nodeType":"190","messageId":"191","endLine":4,"endColumn":25},{"ruleId":"192","severity":1,"message":"193","line":94,"column":37,"nodeType":"194","endLine":94,"endColumn":78},{"ruleId":"188","severity":1,"message":"195","line":37,"column":5,"nodeType":"190","messageId":"191","endLine":37,"endColumn":23},{"ruleId":"188","severity":1,"message":"196","line":2,"column":15,"nodeType":"190","messageId":"191","endLine":2,"endColumn":27},{"ruleId":"188","severity":1,"message":"197","line":3,"column":19,"nodeType":"190","messageId":"191","endLine":3,"endColumn":24},{"ruleId":"188","severity":1,"message":"198","line":5,"column":8,"nodeType":"190","messageId":"191","endLine":5,"endColumn":14},{"ruleId":"188","severity":1,"message":"199","line":6,"column":9,"nodeType":"190","messageId":"191","endLine":6,"endColumn":14},{"ruleId":"188","severity":1,"message":"200","line":7,"column":9,"nodeType":"190","messageId":"191","endLine":7,"endColumn":21},{"ruleId":"188","severity":1,"message":"201","line":1,"column":16,"nodeType":"190","messageId":"191","endLine":1,"endColumn":25},{"ruleId":"188","severity":1,"message":"202","line":1,"column":27,"nodeType":"190","messageId":"191","endLine":1,"endColumn":35},{"ruleId":"188","severity":1,"message":"203","line":2,"column":26,"nodeType":"190","messageId":"191","endLine":2,"endColumn":30},{"ruleId":"204","severity":1,"message":"205","line":8,"column":17,"nodeType":"194","endLine":9,"endColumn":37},{"ruleId":"206","severity":1,"message":"207","line":25,"column":5,"nodeType":"208","messageId":"209","endLine":27,"endColumn":6},{"ruleId":"188","severity":1,"message":"210","line":5,"column":8,"nodeType":"190","messageId":"191","endLine":5,"endColumn":14},{"ruleId":"206","severity":1,"message":"207","line":24,"column":5,"nodeType":"208","messageId":"209","endLine":26,"endColumn":6},{"ruleId":"188","severity":1,"message":"211","line":3,"column":61,"nodeType":"190","messageId":"191","endLine":3,"endColumn":68},{"ruleId":"188","severity":1,"message":"212","line":3,"column":69,"nodeType":"190","messageId":"191","endLine":3,"endColumn":74},{"ruleId":"188","severity":1,"message":"213","line":3,"column":75,"nodeType":"190","messageId":"191","endLine":3,"endColumn":85},{"ruleId":"188","severity":1,"message":"214","line":4,"column":9,"nodeType":"190","messageId":"191","endLine":4,"endColumn":21},{"ruleId":"188","severity":1,"message":"215","line":4,"column":23,"nodeType":"190","messageId":"191","endLine":4,"endColumn":35},{"ruleId":"188","severity":1,"message":"216","line":4,"column":36,"nodeType":"190","messageId":"191","endLine":4,"endColumn":58},{"ruleId":"188","severity":1,"message":"217","line":23,"column":7,"nodeType":"190","messageId":"191","endLine":23,"endColumn":11},{"ruleId":"206","severity":1,"message":"207","line":29,"column":5,"nodeType":"208","messageId":"209","endLine":31,"endColumn":6},{"ruleId":"188","severity":1,"message":"218","line":2,"column":54,"nodeType":"190","messageId":"191","endLine":2,"endColumn":60},{"ruleId":"206","severity":1,"message":"207","line":23,"column":5,"nodeType":"208","messageId":"209","endLine":25,"endColumn":6},{"ruleId":"188","severity":1,"message":"219","line":2,"column":56,"nodeType":"190","messageId":"191","endLine":2,"endColumn":63},{"ruleId":"192","severity":1,"message":"220","line":57,"column":13,"nodeType":"194","endLine":57,"endColumn":80},{"ruleId":"188","severity":1,"message":"221","line":47,"column":11,"nodeType":"190","messageId":"191","endLine":47,"endColumn":18},{"ruleId":"188","severity":1,"message":"210","line":5,"column":8,"nodeType":"190","messageId":"191","endLine":5,"endColumn":14},{"ruleId":"206","severity":1,"message":"207","line":24,"column":5,"nodeType":"208","messageId":"209","endLine":26,"endColumn":6},{"ruleId":"222","severity":1,"message":"223","line":72,"column":8,"nodeType":"224","endLine":72,"endColumn":10,"suggestions":"225"},{"ruleId":"192","severity":1,"message":"220","line":347,"column":41,"nodeType":"194","endLine":350,"endColumn":42},{"ruleId":"188","severity":1,"message":"210","line":5,"column":8,"nodeType":"190","messageId":"191","endLine":5,"endColumn":14},{"ruleId":"206","severity":1,"message":"207","line":24,"column":5,"nodeType":"208","messageId":"209","endLine":26,"endColumn":6},{"ruleId":"192","severity":1,"message":"220","line":379,"column":41,"nodeType":"194","endLine":382,"endColumn":42},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'UserSwitchOutlined' is defined but never used.","'RingProgress' is defined but never used.","'Alert' is defined but never used.","'cookie' is defined but never used.","'login' is defined but never used.","'notification' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Spin' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Option' is assigned a value but never used.","'Tooltip' is defined but never used.","'Space' is defined but never used.","'Typography' is defined but never used.","'LockOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'QuestionCircleOutlined' is defined but never used.","'text' is assigned a value but never used.","'Select' is defined but never used.","'message' is defined but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'testDts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'desChange', 'form', 'props.match.params.id', and 'srcChange'. Either include them or remove the dependency array.","ArrayExpression",["228"],"no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},"Update the dependencies array to be: [desChange, form, props.match.params.id, srcChange]",{"range":"231","text":"232"},[2734,2736],"[desChange, form, props.match.params.id, srcChange]"]