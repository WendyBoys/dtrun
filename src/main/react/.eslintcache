[{"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\index.js":"1","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\App.jsx":"2","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\AuthorizedRoute.jsx":"3","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\user\\Login.jsx":"4","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\user\\Register.jsx":"5","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\dashboard\\Index.jsx":"6","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\user\\service.js":"7","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\dashboard\\Dashboard.jsx":"8","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\movetask\\MoveTask.jsx":"9","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\about\\About.jsx":"10","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\datasource\\Datasource.jsx":"11","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\request.js":"12","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\datasource\\Update.jsx":"13","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\datasource\\Show.jsx":"14","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\datasource\\Create.jsx":"15","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\movetask\\Update.jsx":"16","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\movetask\\Show.jsx":"17","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\movetask\\Create.jsx":"18","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\datasource\\service.js":"19","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\movetask\\service.js":"20","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Sysmanage.jsx":"21","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Logs.jsx":"22","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\service.js":"23","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Pushconfig.jsx":"24","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Update.jsx":"25","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Create.jsx":"26","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Contact.jsx":"27","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\service.js":"28"},{"size":429,"mtime":1613747633009,"results":"29","hashOfConfig":"30"},{"size":1085,"mtime":1617450913246,"results":"31","hashOfConfig":"30"},{"size":446,"mtime":1613747632992,"results":"32","hashOfConfig":"30"},{"size":4994,"mtime":1613747633005,"results":"33","hashOfConfig":"30"},{"size":4224,"mtime":1613747633006,"results":"34","hashOfConfig":"30"},{"size":15816,"mtime":1617450953078,"results":"35","hashOfConfig":"30"},{"size":589,"mtime":1614834009035,"results":"36","hashOfConfig":"30"},{"size":4771,"mtime":1613747632995,"results":"37","hashOfConfig":"30"},{"size":606,"mtime":1617450953080,"results":"38","hashOfConfig":"30"},{"size":3049,"mtime":1614834009027,"results":"39","hashOfConfig":"30"},{"size":663,"mtime":1614834009029,"results":"40","hashOfConfig":"30"},{"size":1781,"mtime":1616403541100,"results":"41","hashOfConfig":"30"},{"size":7835,"mtime":1613747632998,"results":"42","hashOfConfig":"30"},{"size":6832,"mtime":1616999277702,"results":"43","hashOfConfig":"30"},{"size":6325,"mtime":1613747632997,"results":"44","hashOfConfig":"30"},{"size":15538,"mtime":1613747633003,"results":"45","hashOfConfig":"30"},{"size":15468,"mtime":1614834009029,"results":"46","hashOfConfig":"30"},{"size":15853,"mtime":1617450953079,"results":"47","hashOfConfig":"30"},{"size":1228,"mtime":1616403541094,"results":"48","hashOfConfig":"30"},{"size":933,"mtime":1616403541099,"results":"49","hashOfConfig":"30"},{"size":305,"mtime":1614834009031,"results":"50","hashOfConfig":"30"},{"size":2648,"mtime":1617785811117,"results":"51","hashOfConfig":"30"},{"size":278,"mtime":1617785072488,"results":"52","hashOfConfig":"30"},{"size":580,"mtime":1617450913281,"results":"53","hashOfConfig":"30"},{"size":4206,"mtime":1617450913295,"results":"54","hashOfConfig":"30"},{"size":3704,"mtime":1617450913280,"results":"55","hashOfConfig":"30"},{"size":6892,"mtime":1617450953081,"results":"56","hashOfConfig":"30"},{"size":606,"mtime":1617450913296,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"2xqayf",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\index.js",[],["125","126"],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\App.jsx",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\AuthorizedRoute.jsx",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\user\\Login.jsx",["127","128"],"import React from 'react';\r\nimport socket from '../../images/socket.svg';\r\nimport cookie from 'react-cookies'\r\nimport {Button, Checkbox, Col, Form, Input, notification, Row} from 'antd';\r\nimport {LockOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {login} from './service'\r\n\r\nexport default class Login extends React.Component {\r\n\r\n    onFinish = (values) => {\r\n        login({\r\n            account: values.account,\r\n            password: values.password,\r\n        }).then(response => {\r\n            const result = response.data.message;\r\n            const token = response.data.data;\r\n            if (result === 'Success') {\r\n                let inFifteenMinutes = new Date(new Date().getTime() + 7 * 24 * 3600 * 1000);\r\n                cookie.save('token', token, {path: '/', expires: inFifteenMinutes})\r\n                this.props.history.push({pathname: '/index'})\r\n            } else if (result === 'LoginRefuse') {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '账号已被封禁',\r\n                    duration: 2,\r\n                });\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '账号或密码错误',\r\n                    duration: 2,\r\n                });\r\n            }\r\n        })\r\n    };\r\n\r\n    register() {\r\n        this.props.history.push('/register')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row style={{marginBottom: '5%', paddingTop: '20px', minHeight: '200px'}}>\r\n                    <Col span={6}></Col>\r\n                    <Col span={12}><img src={socket} alt=\"\" width=\"100%\" height=\"200px\"/></Col>\r\n                    <Col span={6}>\r\n                        <div>\r\n\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={6}></Col>\r\n                    <Col span={12}>\r\n                        <div>\r\n                            <Form\r\n                                name=\"normal_login\"\r\n                                className=\"login-form\"\r\n                                initialValues={{remember: true}}\r\n                                onFinish={this.onFinish}\r\n                            >\r\n                                <Form.Item\r\n                                    name=\"account\"\r\n                                    label=\"账号\"\r\n                                    rules={[{required: true, message: '请输入账号'}]}\r\n                                >\r\n                                    <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                                           placeholder=\"请输入账号\"/>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name=\"password\"\r\n                                    label=\"密码\"\r\n                                    rules={[{required: true, message: '请输入密码'}]}\r\n                                >\r\n                                    <Input.Password\r\n                                        prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                        type=\"password\"\r\n                                        placeholder=\"请输入密码\"\r\n                                    />\r\n                                </Form.Item>\r\n\r\n                                <Form.Item>\r\n                                    <a className=\"login-form-forgot\" href=\"\">\r\n                                        忘记密码\r\n                                    </a>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\"\r\n                                            style={{marginBottom: '20px'}}>\r\n                                        登录\r\n                                    </Button>\r\n                                    <Button type=\"primary\" htmlType=\"button\" className=\"login-form-button\"\r\n                                            onClick={() => this.register()}>\r\n                                        立即注册\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={6}></Col>\r\n                </Row>\r\n                <Row style={{textAlign: 'center'}}>\r\n                    <Col span={6}></Col>\r\n                    <Col span={12} style={{position: 'absolute', left: '45%', bottom: '10px'}}><a\r\n                        href=\"http://beian.miit.gov.cn\">豫ICP备2020036555号</a></Col>\r\n                    <Col span={6}></Col>\r\n                </Row>\r\n\r\n\r\n            </div>);\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\user\\Register.jsx",["129","130","131"],"import React from 'react';\r\nimport socket from '../../images/socket.svg';\r\nimport {register} from './service'\r\nimport {Button, Col, Form, Input, notification, Row} from 'antd';\r\nimport {AuditOutlined, LockOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst validateMessages = {\r\n    required: '${label}为必填项!',\r\n    string: {\r\n        range: \"${label}的长度为${min}到${max}个字符\"\r\n    },\r\n};\r\nexport default class Register extends React.Component {\r\n\r\n    onFinish = (values) => {\r\n        register({\r\n            account: values.account,\r\n            password: values.password,\r\n            registerCode: values.registerCode,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.props.history.push('/login')\r\n            }\r\n            notification[result === 'Success' ? 'success' : 'error']({\r\n                message: '通知',\r\n                description:\r\n                response.data.data,\r\n                duration: 2,\r\n            });\r\n        });\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row style={{marginBottom: '5%', paddingTop: '20px', minHeight: '200px'}}>\r\n                    <Col span={6}></Col>\r\n                    <Col span={12}><img src={socket} alt=\"\" width=\"100%\" height=\"200px\"/></Col>\r\n                    <Col span={6}></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={6}></Col>\r\n                    <Col span={12}>\r\n                        <Form\r\n                            name=\"normal_login\"\r\n                            className=\"login-form\"\r\n                            initialValues={{remember: true}}\r\n                            onFinish={this.onFinish}\r\n                            validateMessages={validateMessages}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"account\"\r\n                                label=\"账号\"\r\n                                rules={[{required: true, type: 'string', min: 6, max: 10}]}\r\n                            >\r\n                                <Input prefix={<UserOutlined className=\"site-form-item-icon\"/>}\r\n                                       placeholder=\"请输入账号\"/>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                name=\"password\"\r\n                                label=\"密码\"\r\n                                rules={[{required: true, type: 'string', min: 6, max: 10}]}\r\n                            >\r\n                                <Input.Password\r\n                                    prefix={<LockOutlined className=\"site-form-item-icon\"/>}\r\n                                    type=\"password\"\r\n                                    placeholder=\"请输入密码\"\r\n                                />\r\n                            </Form.Item>\r\n                            {/*  <Form.Item\r\n                                name=\"registerCode\"\r\n                                rules={[{required: true, message: '请输入注册码'}]}\r\n                            >\r\n                                <Input\r\n                                    prefix={<AuditOutlined/>}\r\n                                    placeholder=\"注册码\"/>\r\n                            </Form.Item>*/}\r\n                            <Form.Item>\r\n                                <NavLink className=\"login-form-forgot\" to=\"/login\">\r\n                                    已有账号？去登录\r\n                                </NavLink>\r\n                            </Form.Item>\r\n\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\"\r\n                                        style={{marginBottom: '20px'}}>\r\n                                    立即注册\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col span={6}></Col>\r\n                </Row>\r\n            </div>);\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\dashboard\\Index.jsx",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\user\\service.js",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\dashboard\\Dashboard.jsx",["132","133","134","135","136","137"],"import React, {useEffect, useState} from 'react';\r\nimport {Line, RingProgress} from '@ant-design/charts';\r\nimport {Col, Row, Alert, Result, Button, Menu} from 'antd';\r\nimport {InfoCircleTwoTone} from '@ant-design/icons';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Dashboard = () => {\r\n\r\n    const [data, setData] = useState([\r\n        {\r\n            \"date\": \"2018/8/1\",\r\n            \"type\": \"cpu\",\r\n            \"value\": 46\r\n        },\r\n        {\r\n            \"date\": \"2018/8/1\",\r\n            \"type\": \"运行内存\",\r\n            \"value\": 22\r\n        },\r\n        {\r\n            \"date\": \"2018/8/1\",\r\n            \"type\": \"磁盘用量\",\r\n            \"value\": 18\r\n        },\r\n        {\r\n            \"date\": \"2018/8/2\",\r\n            \"type\": \"cpu\",\r\n            \"value\": 61\r\n        },\r\n        {\r\n            \"date\": \"2018/8/2\",\r\n            \"type\": \"运行内存\",\r\n            \"value\": 20\r\n        },\r\n        {\r\n            \"date\": \"2018/8/2\",\r\n            \"type\": \"磁盘用量\",\r\n            \"value\": 25\r\n        },\r\n        {\r\n            \"date\": \"2018/8/3\",\r\n            \"type\": \"cpu\",\r\n            \"value\": 50\r\n        },\r\n        {\r\n            \"date\": \"2018/8/3\",\r\n            \"type\": \"运行内存\",\r\n            \"value\": 29\r\n        },\r\n        {\r\n            \"date\": \"2018/8/3\",\r\n            \"type\": \"磁盘用量\",\r\n            \"value\": 28\r\n        },\r\n        {\r\n            \"date\": \"2018/8/4\",\r\n            \"type\": \"cpu\",\r\n            \"value\": 6\r\n        },\r\n        {\r\n            \"date\": \"2018/8/4\",\r\n            \"type\": \"运行内存\",\r\n            \"value\": 45\r\n        },\r\n        {\r\n            \"date\": \"2018/8/4\",\r\n            \"type\": \"磁盘用量\",\r\n            \"value\": 42\r\n        },\r\n        {\r\n            \"date\": \"2018/8/5\",\r\n            \"type\": \"cpu\",\r\n            \"value\": 64\r\n        },\r\n        {\r\n            \"date\": \"2018/8/5\",\r\n            \"type\": \"运行内存\",\r\n            \"value\": 82\r\n        },\r\n        {\r\n            \"date\": \"2018/8/5\",\r\n            \"type\": \"磁盘用量\",\r\n            \"value\": 61\r\n        },\r\n        {\r\n            \"date\": \"2018/8/6\",\r\n            \"type\": \"cpu\",\r\n            \"value\": 18\r\n        },\r\n        {\r\n            \"date\": \"2018/8/6\",\r\n            \"type\": \"运行内存\",\r\n            \"value\": 20\r\n        },\r\n        {\r\n            \"date\": \"2018/8/6\",\r\n            \"type\": \"磁盘用量\",\r\n            \"value\": 27\r\n        },\r\n        {\r\n            \"date\": \"2018/8/7\",\r\n            \"type\": \"cpu\",\r\n            \"value\": 42\r\n        },\r\n        {\r\n            \"date\": \"2018/8/7\",\r\n            \"type\": \"运行内存\",\r\n            \"value\": 12\r\n        },\r\n        {\r\n            \"date\": \"2018/8/7\",\r\n            \"type\": \"磁盘用量\",\r\n            \"value\": 25\r\n        }\r\n    ]);\r\n\r\n    const config = {\r\n        data: data,\r\n        xField: 'date',\r\n        yField: 'value',\r\n        yAxis: {\r\n            label: {\r\n                formatter: function formatter(v) {\r\n                    return ''.concat(v).replace(/\\d{1,3}(?=(\\d{3})+$)/g, function (s) {\r\n                        return ''.concat(s, ',');\r\n                    });\r\n                },\r\n            },\r\n        },\r\n        legend: {position: 'top'},\r\n        seriesField: 'type',\r\n        color: function color(_ref) {\r\n            const type = _ref.type;\r\n            return type === '运行内存' ? '#F4664A' : type === '磁盘用量' ? '#30BF78' : '#FAAD14';\r\n        },\r\n        lineStyle: function lineStyle(_ref2) {\r\n            const type = _ref2.type;\r\n            if (type === 'register') {\r\n                return {\r\n                    lineDash: [4, 4],\r\n                    opacity: 1,\r\n                };\r\n            }\r\n            return {opacity: 0.5};\r\n        },\r\n    };\r\n\r\n    return <div style={{height: '100%'}}>\r\n        <Row style={{height: '100%', padding: '10px', textAlign: 'center'}}>\r\n            <Col span={8} style={{height: '40%', paddingRight: '10px'}}>\r\n                <Result\r\n                    status=\"success\"\r\n                    title=\"欢迎使用DTRUN迁移系统\"\r\n                    subTitle=\"Order number: 2017182818828182881 Cloud server configuration takes 1-5 minutes, please wait.\"\r\n                    extra={[\r\n                        <Button type=\"primary\" key=\"console\">\r\n                            <NavLink to=\"/datasource/show\">创建数据源</NavLink>\r\n                        </Button>,\r\n                        <Button key=\"buy\">使用教程</Button>,\r\n                    ]}\r\n                />\r\n            </Col>\r\n            <Col span={16}><Line {...config}\r\n                                 style={{maxHeight: '400px', height: '40%', minHeight: '200px'}}/></Col>\r\n        </Row>\r\n\r\n        <Row>\r\n        </Row>\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default Dashboard;","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\movetask\\MoveTask.jsx",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\about\\About.jsx",["138","139","140","141"],"import React, {useEffect, useState} from 'react';\r\nimport {Col, Image, Row, Spin} from 'antd';\r\n\r\nconst About = () => {\r\n    return <div style={{textAlign: 'center', height: '100%', padding: '10px'}}>\r\n        <Row style={{height: '52%'}}>\r\n            <Col span={24} style={{height: '100%'}}>\r\n                <img src='https://gw.alipayobjects.com/mdn/rms_ae7ad9/afts/img/A*-wAhRYnWQscAAAAAAAAAAABkARQnAQ'\r\n                     height='100%'/>\r\n            </Col>\r\n        </Row>\r\n        <Row style={{height: '5%', margin: '5px 0'}}>\r\n            <Col span={24}>\r\n                <div>DTRUN迁移系统是一个无侵入式的对象存储迁移系统,它可以将不同平台的对象存储数据进行平行迁移</div>\r\n                <span>在数据进行迁移的时候不会影响您业务的正常使用并且您无需关注过程,当迁移任务完成后,您将会收到通知</span>\r\n            </Col>\r\n        </Row>\r\n        <Row style={{height: '40%'}}>\r\n            <Col span={6}>\r\n                <Image\r\n                    src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/1.png'\r\n                    placeholder={\r\n                        <Image\r\n                            preview={false}\r\n                            src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/1.png'\r\n                        />\r\n                    }\r\n                />\r\n                <div>支持多种数据源迁移</div>\r\n            </Col>\r\n            <Col span={6}>\r\n                <Image\r\n                    src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/2.png'\r\n                    placeholder={\r\n                        <Image\r\n                            preview={false}\r\n                            src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/2.png'\r\n                        />\r\n                    }\r\n                />\r\n                <div>简单配置，开箱即用</div>\r\n            </Col>\r\n            <Col span={6}> <Image\r\n                src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/4.png'\r\n                placeholder={\r\n                    <Image\r\n                        preview={false}\r\n                        src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/4.png'\r\n                    />\r\n                }\r\n            />\r\n                <div>自动化迁移，无需人工二次干预</div>\r\n            </Col>\r\n            <Col span={6}> <Image\r\n                src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/5.png'\r\n                placeholder={\r\n                    <Image\r\n                        preview={false}\r\n                        src='https://cdn.jsdelivr.net/gh/WendyBoys/oss/img/5.png'\r\n                    />\r\n                }\r\n            />\r\n                <div>无侵入式设计,迁移时不影响业务使用</div>\r\n            </Col>\r\n\r\n        </Row>\r\n\r\n        <Row style={{height: '3%'}}>\r\n            <Col span={24}>\r\n                <span>© 20017-2021 Dtrun.cn 版权所有</span>\r\n            </Col>\r\n        </Row>\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default About;","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\datasource\\Datasource.jsx",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\request.js",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\datasource\\Update.jsx",["142"],"import React from 'react';\r\nimport {getDtSourceById, testconnection, updateDataSource} from './service';\r\nimport {Button, Col, Form, Input, notification, Row, Select} from 'antd';\r\n\r\nconst {Option} = Select;\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 3,\r\n        span: 16,\r\n    },\r\n};\r\nexport default class Update extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount() {\r\n        getDtSourceById({\r\n            id: this.props.match.params.id,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                const data = response.data.data;\r\n                const dtSourceJson = JSON.parse(data.dtSourceJson);\r\n                this.formRef.current.setFieldsValue(\r\n                    {\r\n                        dtsName: data.dtSourceName,\r\n                        dtsType: data.dtSourceType,\r\n                        accessKey: dtSourceJson.accessKey,\r\n                        accessSecret: dtSourceJson.accessSecret,\r\n                        region: dtSourceJson.region\r\n                    },\r\n                );\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取数据源信息失败，请稍后重试',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    test() {\r\n        this.formRef.current.validateFields()\r\n            .then(values => {\r\n                testconnection({\r\n                    dataSourceType: values.dtsType,\r\n                    accessKey: values.accessKey,\r\n                    accessSecret: values.accessSecret,\r\n                    region: values.region,\r\n                }).then((response) => {\r\n                    const result = response.data.message;\r\n                    if (result === 'Success') {\r\n                        notification['success']({\r\n                            message: '通知',\r\n                            description:\r\n                                '测试成功',\r\n                            duration: 1,\r\n                        });\r\n                    } else {\r\n                        notification['error']({\r\n                            message: '通知',\r\n                            description:\r\n                                '测试失败，请检查参数',\r\n                            duration: 1,\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n    quit() {\r\n        this.props.history.goBack();\r\n\r\n    }\r\n\r\n\r\n    onFinish = (values) => {\r\n        updateDataSource({\r\n            id: this.props.match.params.id,\r\n            dataSourceName: values.dtsName,\r\n            dataSourceType: values.dtsType,\r\n            secretId: values.accessKey,\r\n            secretKey: values.accessSecret,\r\n            region: values.region,\r\n        }).then((response) => {\r\n            var result = response.data.message;\r\n            if (result === 'Success') {\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '修改成功',\r\n                    duration: 1,\r\n                });\r\n                this.props.history.push('/datasource/show');\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '修改失败,请重试',\r\n                    duration: 1,\r\n                });\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        return <div style={{padding: '10px'}}>\r\n            <h2>修改数据源</h2>\r\n            <Row>\r\n                <Col span={24}>\r\n\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"basic\"\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        onFinish={this.onFinish}\r\n\r\n                    >\r\n                        <Form.Item\r\n                            label=\"数据源名称\"\r\n                            name=\"dtsName\"\r\n\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入数据源名称',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入数据源名称\"/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"dtsType\" label=\"数据源类型\" rules={[{required: true, message: '请选择数据源类型'}]}>\r\n                            <Select\r\n                                placeholder=\"请选择数据源类型\"\r\n                                onChange={this.onGenderChange}\r\n                                allowClear\r\n                            >\r\n                                <Option value=\"cos\">COS</Option>\r\n                                <Option value=\"oss\">OSS</Option>\r\n                                <Option value=\"obs\">OBS</Option>\r\n                                <Option value=\"bos\">BOS</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"AccessKey\"\r\n                            name=\"accessKey\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入AccessKey',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入AccessKey\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"AccessSecret\"\r\n                            name=\"accessSecret\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入AccessSecret',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入AccessSecret\"/>\r\n                        </Form.Item>\r\n\r\n\r\n                        <Form.Item\r\n                            label=\"地域\"\r\n                            name=\"region\"\r\n                            rules={[\r\n                                {\r\n\r\n                                    message: '请输入地域',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入地域\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\r\n                                确定\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.test()} style={{marginRight: '10px'}}>\r\n                                测试\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                取消\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n\r\n            </Row>\r\n        </div>\r\n\r\n\r\n    }\r\n}","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\datasource\\Show.jsx",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\datasource\\Create.jsx",["143"],"import React from 'react';\r\nimport {createDataSource, testconnection} from './service';\r\nimport {Button, Col, Form, Input, notification, Row, Select} from 'antd';\r\n\r\nconst {Option} = Select;\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 3,\r\n        span: 16,\r\n    },\r\n};\r\nexport default class Create extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    test() {\r\n        this.formRef.current.validateFields()\r\n            .then(values => {\r\n                testconnection({\r\n                    dataSourceType: values.dtsType,\r\n                    accessKey: values.accessKey,\r\n                    accessSecret: values.accessSecret,\r\n                    region: values.region,\r\n                }).then((response) => {\r\n                    const result = response.data.message;\r\n                    if (result === 'Success') {\r\n                        notification['success']({\r\n                            message: '通知',\r\n                            description:\r\n                                '测试成功',\r\n                            duration: 1,\r\n                        });\r\n                    } else {\r\n                        notification['error']({\r\n                            message: '通知',\r\n                            description:\r\n                                '测试失败,请检查参数',\r\n                            duration: 1,\r\n                        });\r\n                    }\r\n                });\r\n            })\r\n            .catch(errorInfo => {\r\n\r\n            });\r\n\r\n    }\r\n\r\n    quit() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onFinish = (values) => {\r\n        createDataSource({\r\n            dataSourceName: values.dtsName,\r\n            dataSourceType: values.dtsType,\r\n            secretId: values.accessKey,\r\n            secretKey: values.accessSecret,\r\n            region: values.region,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.props.history.push('/datasource/show');\r\n            } else {\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return <div style={{padding: '10px'}}>\r\n            <h2>创建数据源</h2>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"basic\"\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        onFinish={this.onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"数据源名称\"\r\n                            name=\"dtsName\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入数据源名称',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入数据源名称\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item name=\"dtsType\" label=\"数据源类型\" rules={[{required: true, message: '请选择数据源类型'}]}>\r\n                            <Select\r\n                                placeholder=\"请选择数据源类型\"\r\n                                onChange={this.onGenderChange}\r\n                                allowClear\r\n                            >\r\n                                <Option value=\"cos\">COS</Option>\r\n                                <Option value=\"oss\">OSS</Option>\r\n                                <Option value=\"obs\">OBS</Option>\r\n                                <Option value=\"bos\">BOS</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"AccessKey\"\r\n                            name=\"accessKey\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入AccessKey',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入AccessKey\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"AccessSecret\"\r\n                            name=\"accessSecret\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入AccessSecret',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入AccessSecret\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"地域\"\r\n                            name=\"region\"\r\n                            rules={[\r\n                                {\r\n\r\n                                    message: '请输入地域',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入地域\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\r\n                                确定\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.test()} style={{marginRight: '10px'}}>\r\n                                测试\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                取消\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n\r\n            </Row>\r\n        </div>\r\n\r\n    }\r\n}","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\movetask\\Update.jsx",["144","145"],"import {Button, Checkbox, Divider, Form, Input, notification, Popover, Select, Spin, Steps} from 'antd';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {createBucket, getAllDtSourceName, getBucketLists} from '../datasource/service';\r\nimport {getMoveTaskById, updateMoveTask} from './service';\r\nimport {PlusOutlined} from '@ant-design/icons';\r\n\r\nconst {Step} = Steps;\r\nconst {Option} = Select;\r\nconst layout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\n\r\n\r\nconst Update = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [current, setCurrent] = useState(0);\r\n    const [data, setData] = useState({});\r\n    const [checked, setChecked] = useState(true);\r\n    const [dtsList, setDtsList] = useState([]);\r\n    const [srcBucketList, setSrcBucketList] = useState([]);\r\n    const [desBucketList, setDesBucketList] = useState([]);\r\n    const [showAddBucket, setShowAddBucket] = useState(false);\r\n    const [newBucketName, setNewBucketName] = useState([]);\r\n\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        getAllDtSourceName().then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setDtsList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取数据源列表失败，请检查数据源配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n        getMoveTaskById({\r\n            id: props.match.params.id\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            const data = response.data.data;\r\n            if (result === 'Success') {\r\n                const taskJson = JSON.parse(data.taskJson);\r\n                form.setFieldsValue({srcBucket: taskJson.srcBucket})\r\n                form.setFieldsValue({desBucket: taskJson.desBucket})\r\n                setChecked(taskJson.allMove !== 'false')\r\n                form.setFieldsValue({srcId: parseInt(taskJson.srcId)})\r\n                form.setFieldsValue({desId: parseInt(taskJson.desId)})\r\n                form.setFieldsValue({taskName: data.taskName})\r\n                srcChange(parseInt(taskJson.srcId), false);\r\n                desChange(parseInt(taskJson.desId), false)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取迁移任务失败，请检查配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }, []);\r\n\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n\r\n    const onChange = () => {\r\n        setChecked(!checked)\r\n    }\r\n\r\n    const srcChange = (id, flag) => {\r\n        setLoading(true)\r\n        if (flag !== false) {\r\n            form.setFieldsValue({srcBucket: undefined})\r\n            setSrcBucketList([])\r\n        }\r\n        getBucketLists({\r\n            id: id,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setSrcBucketList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取Bucket列表失败，请检查数据源配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    const desChange = (id, flag) => {\r\n        setLoading(true)\r\n        if (flag) {\r\n            form.setFieldsValue({desBucket: undefined})\r\n            setDesBucketList([])\r\n        }\r\n        getBucketLists({\r\n            id: id\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setDesBucketList(response.data.data)\r\n                setShowAddBucket(true)\r\n            } else {\r\n                setShowAddBucket(false)\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取Bucket列表失败，请检查数据源配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    const addItem = () => {\r\n        const desId = form.getFieldValue('desId');\r\n        //发请求创建新的Bucket\r\n        createBucket({\r\n            desId: desId,\r\n            newBucketName: newBucketName,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setNewBucketName([])\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建Bucket成功',\r\n                    duration: 2,\r\n                });\r\n                setDesBucketList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建Bucket列表失败，请检查配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    const quit = () => {\r\n        props.history.goBack();\r\n\r\n    }\r\n\r\n    const onNameChange = event => {\r\n        setNewBucketName(event.target.value)\r\n    }\r\n\r\n    const srcOnFinish = values => {\r\n        setData({...data, 'src': values, 'allMove': checked})\r\n        setCurrent(current + 1);\r\n    };\r\n\r\n    const desOnFinish = values => {\r\n        setData({...data, 'des': values})\r\n        setCurrent(current + 1);\r\n    };\r\n\r\n    const OnFinish = values => {\r\n        const body = {...data, 'option': values}\r\n        updateMoveTask({\r\n            id: props.match.params.id,\r\n            srcId: body.src.srcId,\r\n            srcBucket: body.src.srcBucket,\r\n            desId: body.des.desId,\r\n            desBucket: body.des.desBucket,\r\n            allMove: body.allMove,\r\n            taskName: body.option.taskName,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '修改迁移任务成功',\r\n                    duration: 2,\r\n                });\r\n                props.history.push('/movetask/show');\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '修改迁移任务失败，请检查配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    const steps = [\r\n        {\r\n            title: '选择起始数据源',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                form={form}\r\n                onFinish={srcOnFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"起始\"\r\n                    name=\"srcId\"\r\n                    rules={[{required: true, message: '请选择数据源'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择数据源\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        onChange={srcChange}\r\n                    >\r\n                        {\r\n                            dtsList.map((item, index) =>\r\n                                <Option key={index} value={item.id}>{item.dtSourceName}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"srcBucket\"\r\n                    label=\"Bucket\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}>\r\n                    <Select\r\n                        placeholder=\"请选择Bucket\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                    >\r\n                        {\r\n                            srcBucketList.map((item, index) =>\r\n                                <Option key={index} value={item}>{item}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"全量迁移\">\r\n                    <Checkbox onChange={onChange} checked={checked}></Checkbox>\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0 10px 0 25%'}}>\r\n                        下一步\r\n                    </Button>\r\n                    <Button htmlType=\"button\" onClick={() => quit()}>\r\n                        取消\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n        {\r\n            title: '选择目的数据源',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                form={form}\r\n                onFinish={desOnFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"目的数据源\"\r\n                    name=\"desId\"\r\n                    rules={[{required: true, message: '请选择数据源'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择数据源\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        onChange={desChange}\r\n                    >\r\n                        {\r\n                            dtsList.map((item, index) =>\r\n                                <Option key={index} value={item.id}>{item.dtSourceName}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"desBucket\"\r\n                    label=\"Bucket\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择Bucket\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                                {menu}\r\n                                {showAddBucket && <div>\r\n                                    <Divider style={{margin: '4px 0'}}/>\r\n                                    <div style={{display: 'flex', flexWrap: 'nowrap', padding: 8}}>\r\n                                        <Input style={{flex: 'auto'}} value={newBucketName} onChange={onNameChange}/>\r\n                                        <a\r\n                                            style={{flex: 'none', padding: '8px', display: 'block', cursor: 'pointer'}}\r\n                                            onClick={addItem}\r\n                                        >\r\n                                            <PlusOutlined/> 创建Bucket\r\n                                        </a>\r\n                                    </div>\r\n                                </div>}\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {\r\n                            desBucketList.map((item, index) =>\r\n                                <Option key={index} value={item}>{item}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0 10px 0 25%'}}>\r\n                        下一步\r\n                    </Button>\r\n                    <Button type=\"primary\" htmlType=\"button\" onClick={prev}>\r\n                        上一步\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n        {\r\n            title: '参数设置',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                onFinish={OnFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"任务名称\"\r\n                    name=\"taskName\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}\r\n                >\r\n                    <Input placeholder=\"请输入任务名称\"/>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0 10px 0 25%'}}>\r\n                        确定\r\n                    </Button>\r\n                    <Button type=\"primary\" htmlType=\"button\" onClick={prev}>\r\n                        上一步\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n    ];\r\n\r\n\r\n    const customDot = (dot, {status, index}) => (\r\n        <Popover\r\n            content={\r\n                <span>\r\n              step {index}\r\n            </span>\r\n            }\r\n        >\r\n            {dot}\r\n        </Popover>\r\n    );\r\n\r\n\r\n    return <Spin size=\"large\" spinning={loading}>\r\n        <Steps forcerender=\"true\" progressDot={customDot} current={current}>\r\n            {steps.map(item => (\r\n                <Step key={item.title} title={item.title}/>\r\n            ))}\r\n        </Steps>\r\n        <div className=\"steps-content\">{steps[current].content}\r\n            <div className=\"steps-action\">\r\n            </div>\r\n        </div>\r\n    </Spin>\r\n}\r\n\r\n\r\nexport default Update;","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\movetask\\Show.jsx",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\movetask\\Create.jsx",["146"],"import {Button, Checkbox, Divider, Form, Input, notification, Popover, Select, Spin, Steps} from 'antd';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {createBucket, getAllDtSourceName, getBucketLists} from '../datasource/service';\r\nimport {createMoveTask} from './service';\r\nimport {PlusOutlined} from '@ant-design/icons';\r\n\r\nconst {Step} = Steps;\r\nconst {Option} = Select;\r\nconst layout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 16,\r\n    },\r\n};\r\n\r\n\r\nconst Create = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [current, setCurrent] = useState(0);\r\n    const [data, setData] = useState({});\r\n    const [checked, setChecked] = useState(true);\r\n    const [contactChecked, setContactChecked] = useState(true);\r\n    const [dtsList, setDtsList] = useState([]);\r\n    const [srcBucketList, setSrcBucketList] = useState([]);\r\n    const [desBucketList, setDesBucketList] = useState([]);\r\n    const [showAddBucket, setShowAddBucket] = useState(false);\r\n    const [newBucketName, setNewBucketName] = useState([]);\r\n\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        getAllDtSourceName()\r\n            .then((response) => {\r\n                const result = response.data.message;\r\n                if (result === 'Success') {\r\n                    setDtsList(response.data.data)\r\n                } else {\r\n                    notification['error']({\r\n                        message: '通知',\r\n                        description:\r\n                            '获取数据源列表失败，请检查数据源配置',\r\n                        duration: 2,\r\n                    });\r\n                }\r\n                setLoading(false)\r\n            });\r\n    }, []);\r\n\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n\r\n    const onChange = () => {\r\n        setChecked(!checked)\r\n    }\r\n    const contactChange = () => {\r\n        setContactChecked(!contactChecked)\r\n    }\r\n\r\n    const srcChange = (id) => {\r\n        setLoading(true)\r\n        form.setFieldsValue({srcBucket: undefined})\r\n        setSrcBucketList([])\r\n        getBucketLists({\r\n            id: id\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setSrcBucketList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取Bucket列表失败，请检查数据源配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    const desChange = (id) => {\r\n        setLoading(true)\r\n        form.setFieldsValue({desBucket: undefined})\r\n        setDesBucketList([])\r\n        getBucketLists({\r\n            id: id\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setDesBucketList(response.data.data)\r\n                setShowAddBucket(true)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取Bucket列表失败，请检查数据源配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    const addItem = () => {\r\n        const desId = form.getFieldValue('desId');\r\n        createBucket({\r\n            desId: desId,\r\n            newBucketName: newBucketName,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                setNewBucketName([])\r\n                notification['success']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建Bucket成功',\r\n                    duration: 2,\r\n                });\r\n                setDesBucketList(response.data.data)\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建Bucket列表失败，请检查配置',\r\n                    duration: 2,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    const quit = () => {\r\n        props.history.goBack();\r\n\r\n    }\r\n\r\n    const onNameChange = event => {\r\n        setNewBucketName(event.target.value)\r\n    }\r\n\r\n    const srcOnFinish = values => {\r\n        setData({...data, 'src': values, 'allMove': checked})\r\n        setCurrent(current + 1);\r\n    };\r\n\r\n    const desOnFinish = values => {\r\n        setData({...data, 'des': values})\r\n        setCurrent(current + 1);\r\n    };\r\n\r\n    const OnFinish = values => {\r\n        const body = {...data, 'option': values}\r\n        createMoveTask({\r\n            srcId: body.src.srcId,\r\n            srcBucket: body.src.srcBucket,\r\n            desId: body.des.desId,\r\n            desBucket: body.des.desBucket,\r\n            allMove: body.allMove,\r\n            taskName: body.option.taskName,\r\n        })\r\n            .then((response) => {\r\n                const result = response.data.message;\r\n                if (result === 'Success') {\r\n                    notification['success']({\r\n                        message: '通知',\r\n                        description:\r\n                            '创建迁移任务成功',\r\n                        duration: 2,\r\n                    });\r\n                    props.history.push('/movetask/show');\r\n                } else {\r\n                    notification['error']({\r\n                        message: '通知',\r\n                        description:\r\n                            '创建迁移任务失败，请检查配置',\r\n                        duration: 2,\r\n                    });\r\n                }\r\n            });\r\n    };\r\n\r\n\r\n    const steps = [\r\n        {\r\n            title: '选择起始数据源',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                form={form}\r\n                onFinish={srcOnFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"数据源\"\r\n                    name=\"srcId\"\r\n                    rules={[{required: true, message: '请选择数据源'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择数据源\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        onChange={srcChange}\r\n                    >\r\n                        {\r\n                            dtsList.map((item, index) =>\r\n                                <Option key={index} value={item.id}>{item.dtSourceName}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name=\"srcBucket\"\r\n                    label=\"Bucket\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}>\r\n                    <Select\r\n                        placeholder=\"请选择Bucket\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                    >\r\n                        {\r\n                            srcBucketList.map((item, index) =>\r\n                                <Option key={index} value={item}>{item}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"全量迁移\">\r\n                    <Checkbox onChange={onChange} checked={checked}></Checkbox>\r\n                </Form.Item>\r\n\r\n                {!checked &&\r\n                <div>\r\n                    <Form.Item\r\n                        label=\"请输入文件名前缀\"\r\n                        name=\"fileNameStart\"\r\n                    >\r\n                        <Input placeholder=\"请输入文件名前缀\"/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"请输入文件名后缀\"\r\n                        name=\"fileNameEnd\"\r\n                    >\r\n                        <Input placeholder=\"请输入文件名后缀\"/>\r\n                    </Form.Item>\r\n                </div>\r\n                }\r\n\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0 10px 0 25%'}}>\r\n                        下一步\r\n                    </Button>\r\n                    <Button htmlType=\"button\" onClick={() => quit()}>\r\n                        取消\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n        {\r\n            title: '选择目的数据源',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                form={form}\r\n                onFinish={desOnFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"数据源\"\r\n                    name=\"desId\"\r\n                    rules={[{required: true, message: '请选择数据源'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择数据源\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        onChange={desChange}\r\n                    >\r\n                        {\r\n                            dtsList.map((item, index) =>\r\n                                <Option key={index} value={item.id}>{item.dtSourceName}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    name=\"desBucket\"\r\n                    label=\"Bucket\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}\r\n                >\r\n                    <Select\r\n                        placeholder=\"请选择Bucket\"\r\n                        allowClear\r\n                        showSearch\r\n                        optionFilterProp=\"children\"\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                        filterSort={(optionA, optionB) =>\r\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n                        }\r\n                        dropdownRender={menu => (\r\n                            <div>\r\n                                {menu}\r\n                                {showAddBucket && <div>\r\n                                    <Divider style={{margin: '4px 0'}}/>\r\n                                    <div style={{display: 'flex', flexWrap: 'nowrap', padding: 8}}>\r\n                                        <Input style={{flex: 'auto'}} value={newBucketName} onChange={onNameChange}/>\r\n                                        <a\r\n                                            style={{flex: 'none', padding: '8px', display: 'block', cursor: 'pointer'}}\r\n                                            onClick={addItem}\r\n                                        >\r\n                                            <PlusOutlined/> 创建Bucket\r\n                                        </a>\r\n                                    </div>\r\n                                </div>}\r\n                            </div>\r\n                        )}\r\n                    >\r\n                        {\r\n                            desBucketList.map((item, index) =>\r\n                                <Option key={index} value={item}>{item}</Option>\r\n                            )\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0 10px 0 25%'}}>\r\n                        下一步\r\n                    </Button>\r\n                    <Button type=\"primary\" htmlType=\"button\" onClick={prev}>\r\n                        上一步\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n        {\r\n            title: '参数设置',\r\n            content: (<Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                onFinish={OnFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"迁移任务名称\"\r\n                    name=\"taskName\"\r\n                    rules={[{required: true, message: '请选择Bucket'}]}\r\n                >\r\n                    <Input placeholder=\"请输入迁移任务名称\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"任务完成通知\">\r\n                    <Checkbox onChange={contactChange} checked={checked}></Checkbox>\r\n                </Form.Item>\r\n\r\n                {contactChecked &&\r\n                <Form.Item name=\"contact\" label=\"联系人\" rules={[{required: true, message: '请选择联系人'}]}>\r\n                    <Select\r\n                        placeholder=\"请选择联系人\"\r\n                        allowClear\r\n                    >\r\n                        <Option value=\"张三\">张三</Option>\r\n                        <Option value=\"李四\">李四</Option>\r\n                        <Option value=\"王麻子\">王麻子</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n                }\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{margin: '0 10px 0 25%'}}>\r\n                        确定\r\n                    </Button>\r\n                    <Button type=\"primary\" htmlType=\"button\" onClick={prev}>\r\n                        上一步\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>),\r\n        },\r\n    ];\r\n\r\n\r\n    const customDot = (dot, {status, index}) => (\r\n        <Popover\r\n            content={\r\n                <span>\r\n              step {index}\r\n            </span>\r\n            }\r\n        >\r\n            {dot}\r\n        </Popover>\r\n    );\r\n\r\n\r\n    return <Spin size=\"large\" spinning={loading}>\r\n        <Steps forcerender=\"true\" progressDot={customDot} current={current}>\r\n            {steps.map(item => (\r\n                <Step key={item.title} title={item.title}/>\r\n            ))}\r\n        </Steps>\r\n        <div className=\"steps-content\">{steps[current].content}\r\n            <div className=\"steps-action\">\r\n            </div>\r\n        </div>\r\n    </Spin>\r\n}\r\n\r\n\r\nexport default Create;","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\datasource\\service.js",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\movetask\\service.js",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Sysmanage.jsx",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\Logs.jsx",["147","148","149"],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\sysmanage\\service.js",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Pushconfig.jsx",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Update.jsx",["150","151"],"import React from 'react';\r\nimport {updateContact, getContactById} from '../pushconfig/service'\r\nimport {Button, Col, Form, Input, notification, Row, Select} from 'antd';\r\n\r\nconst {Option} = Select;\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 3,\r\n        span: 16,\r\n    },\r\n};\r\nexport default class Pushconfig extends React.Component {\r\n    formRef = React.createRef();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount() {\r\n        getContactById({\r\n            id: this.props.match.params.id,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                const data = response.data.data;\r\n                this.formRef.current.setFieldsValue(\r\n                    {\r\n                        contactName: data.contactName,\r\n                        contactEmail: data.contactEmail,\r\n                    },\r\n                );\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '获取联系人信息失败，请稍后重试',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    quit() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n\r\n    onFinish = (values) => {\r\n        updateContact({\r\n            id: this.props.match.params.id,\r\n            contactName: values.contactName,\r\n            contactEmail: values.contactEmail,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.props.history.push('/pushconfig/contact');\r\n            } else {\r\n\r\n            }\r\n        });\r\n    };\r\n    render() {\r\n        return <div style={{padding: '10px'}}>\r\n            <h2>修改联系人</h2>\r\n            <Row>\r\n                <Col span={20}>\r\n                    <Form\r\n                        {...layout}\r\n                        ref={this.formRef}\r\n                        name=\"basic\"\r\n                        initialValues={{\r\n                            remember: true,\r\n                        }}\r\n                        onFinish={this.onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"联系人名称\"\r\n                            name=\"contactName\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入联系人名称',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入联系人名称\"/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"contactEmail\"\r\n                            label=\"联系人邮箱\"\r\n                            rules={[\r\n                                {\r\n                                    type: 'email',\r\n                                    message: '请输入正确格式的邮箱地址',\r\n                                },\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入联系人邮箱',\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input placeholder=\"请输入联系人邮箱\"/>\r\n                        </Form.Item>\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\r\n                                确定\r\n                            </Button>\r\n                            <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                取消\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    }\r\n}\r\n","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Create.jsx",["152","153"],"import React from 'react';\r\nimport {Button, Col, Form, Input, notification, Row, Select} from 'antd';\r\nimport {createContact} from \"../pushconfig/service\";\r\n\r\nconst {Option} = Select;\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 3,\r\n    },\r\n    wrapperCol: {\r\n        span: 12,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 3,\r\n        span: 16,\r\n    },\r\n};\r\n\r\nexport default class Pushconfig extends React.Component {\r\n    formRef = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    quit() {\r\n        this.props.history.goBack();\r\n    }\r\n    onFinish = (values) => {\r\n        createContact({\r\n            contactName: values.contactName,\r\n            contactEmail: values.contactEmail,\r\n        }).then((response) => {\r\n            const result = response.data.message;\r\n            if (result === 'Success') {\r\n                this.props.history.push('/pushconfig/contact');\r\n            } else {\r\n                notification['error']({\r\n                    message: '通知',\r\n                    description:\r\n                        '创建失败，联系人已存在',\r\n                    duration: 1,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return <div style={{padding: '10px'}}>\r\n            <h2>创建联系人</h2>\r\n            <Row>\r\n                   <Col span={20}>\r\n                       <Form\r\n                           {...layout}\r\n                           ref={this.formRef}\r\n                           name=\"basic\"\r\n                           initialValues={{\r\n                               remember: true,\r\n                           }}\r\n                           onFinish={this.onFinish}\r\n                       >\r\n                           <Form.Item\r\n                               label=\"联系人名称\"\r\n                               name=\"contactName\"\r\n                               rules={[\r\n                                   {\r\n                                       required: true,\r\n                                       message: '请输入联系人名称',\r\n                                   },\r\n                               ]}\r\n                           >\r\n                               <Input placeholder=\"请输入联系人名称\"/>\r\n                           </Form.Item>\r\n\r\n                           <Form.Item\r\n                               name=\"contactEmail\"\r\n                               label=\"联系人邮箱\"\r\n                               rules={[\r\n                                   {\r\n                                       type: 'email',\r\n                                       message: '请输入正确格式的邮箱地址',\r\n                                   },\r\n                                   {\r\n                                       required: true,\r\n                                       message: '请输入联系人邮箱',\r\n                                   },\r\n                               ]}\r\n                           >\r\n                               <Input placeholder=\"请输入联系人邮箱\"/>\r\n                           </Form.Item>\r\n                           <Form.Item {...tailLayout}>\r\n                               <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\r\n                                   确定\r\n                               </Button>\r\n                               <Button htmlType=\"button\" onClick={() => this.quit()}>\r\n                                   取消\r\n                               </Button>\r\n                           </Form.Item>\r\n                       </Form>\r\n                   </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    }\r\n}\r\n","D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\Contact.jsx",[],"D:\\trave\\trave\\dtrun\\src\\main\\react\\src\\components\\pushconfig\\service.js",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":4,"column":17,"nodeType":"160","messageId":"161","endLine":4,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":86,"column":37,"nodeType":"164","endLine":86,"endColumn":78},{"ruleId":"158","severity":1,"message":"165","line":5,"column":9,"nodeType":"160","messageId":"161","endLine":5,"endColumn":22},{"ruleId":"166","severity":1,"message":"167","line":9,"column":15,"nodeType":"168","messageId":"169","endLine":9,"endColumn":30},{"ruleId":"166","severity":1,"message":"167","line":11,"column":16,"nodeType":"168","messageId":"169","endLine":11,"endColumn":46},{"ruleId":"158","severity":1,"message":"170","line":1,"column":16,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},{"ruleId":"158","severity":1,"message":"171","line":2,"column":15,"nodeType":"160","messageId":"161","endLine":2,"endColumn":27},{"ruleId":"158","severity":1,"message":"172","line":3,"column":19,"nodeType":"160","messageId":"161","endLine":3,"endColumn":24},{"ruleId":"158","severity":1,"message":"173","line":3,"column":42,"nodeType":"160","messageId":"161","endLine":3,"endColumn":46},{"ruleId":"158","severity":1,"message":"174","line":4,"column":9,"nodeType":"160","messageId":"161","endLine":4,"endColumn":26},{"ruleId":"158","severity":1,"message":"175","line":9,"column":18,"nodeType":"160","messageId":"161","endLine":9,"endColumn":25},{"ruleId":"158","severity":1,"message":"170","line":1,"column":16,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},{"ruleId":"158","severity":1,"message":"176","line":1,"column":27,"nodeType":"160","messageId":"161","endLine":1,"endColumn":35},{"ruleId":"158","severity":1,"message":"177","line":2,"column":26,"nodeType":"160","messageId":"161","endLine":2,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":8,"column":17,"nodeType":"164","endLine":9,"endColumn":37},{"ruleId":"180","severity":1,"message":"181","line":25,"column":5,"nodeType":"182","messageId":"183","endLine":27,"endColumn":6},{"ruleId":"180","severity":1,"message":"181","line":25,"column":5,"nodeType":"182","messageId":"183","endLine":27,"endColumn":6},{"ruleId":"184","severity":1,"message":"185","line":72,"column":8,"nodeType":"186","endLine":72,"endColumn":10,"suggestions":"187"},{"ruleId":"162","severity":1,"message":"188","line":340,"column":41,"nodeType":"164","endLine":343,"endColumn":42},{"ruleId":"162","severity":1,"message":"188","line":333,"column":41,"nodeType":"164","endLine":336,"endColumn":42},{"ruleId":"158","severity":1,"message":"189","line":2,"column":55,"nodeType":"160","messageId":"161","endLine":2,"endColumn":62},{"ruleId":"158","severity":1,"message":"190","line":5,"column":9,"nodeType":"160","messageId":"161","endLine":5,"endColumn":16},{"ruleId":"162","severity":1,"message":"188","line":57,"column":9,"nodeType":"164","endLine":57,"endColumn":76},{"ruleId":"158","severity":1,"message":"191","line":5,"column":8,"nodeType":"160","messageId":"161","endLine":5,"endColumn":14},{"ruleId":"180","severity":1,"message":"181","line":24,"column":5,"nodeType":"182","messageId":"183","endLine":26,"endColumn":6},{"ruleId":"158","severity":1,"message":"191","line":5,"column":8,"nodeType":"160","messageId":"161","endLine":5,"endColumn":14},{"ruleId":"180","severity":1,"message":"181","line":24,"column":5,"nodeType":"182","messageId":"183","endLine":26,"endColumn":6},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'AuditOutlined' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'useEffect' is defined but never used.","'RingProgress' is defined but never used.","'Alert' is defined but never used.","'Menu' is defined but never used.","'InfoCircleTwoTone' is defined but never used.","'setData' is assigned a value but never used.","'useState' is defined but never used.","'Spin' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'desChange', 'form', 'props.match.params.id', and 'srcChange'. Either include them or remove the dependency array.","ArrayExpression",["194"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'message' is defined but never used.","'deletes' is defined but never used.","'Option' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"195","fix":"196"},"Update the dependencies array to be: [desChange, form, props.match.params.id, srcChange]",{"range":"197","text":"198"},[2734,2736],"[desChange, form, props.match.params.id, srcChange]"]